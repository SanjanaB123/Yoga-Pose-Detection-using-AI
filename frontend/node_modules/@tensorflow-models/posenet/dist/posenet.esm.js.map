{"version":3,"file":"posenet.esm.js","sources":["../src/base_model.ts","../src/mobilenet.ts","../src/multi_pose/max_heap.ts","../src/multi_pose/build_part_with_score_queue.ts","../src/keypoints.ts","../src/multi_pose/util.ts","../src/multi_pose/decode_pose.ts","../src/multi_pose/decode_multiple_poses.ts","../src/single_pose/argmax2d.ts","../src/single_pose/util.ts","../src/single_pose/decode_single_pose.ts","../src/checkpoints.ts","../src/resnet.ts","../src/util.ts","../src/posenet_model.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfconv from '@tensorflow/tfjs-converter';\nimport * as tf from '@tensorflow/tfjs-core';\nimport {PoseNetOutputStride} from './types';\n\n/**\n * PoseNet supports using various convolution neural network models\n * (e.g. ResNet and MobileNetV1) as its underlying base model.\n * The following BaseModel interface defines a unified interface for\n * creating such PoseNet base models. Currently both MobileNet (in\n * ./mobilenet.ts) and ResNet (in ./resnet.ts) implements the BaseModel\n * interface. New base models that conform to the BaseModel interface can be\n * added to PoseNet.\n */\nexport abstract class BaseModel {\n  constructor(\n      protected readonly model: tfconv.GraphModel,\n      public readonly outputStride: PoseNetOutputStride) {\n    const inputShape =\n        this.model.inputs[0].shape as [number, number, number, number];\n    tf.util.assert(\n        (inputShape[1] === -1) && (inputShape[2] === -1),\n        () => `Input shape [${inputShape[1]}, ${inputShape[2]}] ` +\n            `must both be equal to or -1`);\n  }\n\n  abstract preprocessInput(input: tf.Tensor3D): tf.Tensor3D;\n\n  /**\n   * Predicts intermediate Tensor representations.\n   *\n   * @param input The input RGB image of the base model.\n   * A Tensor of shape: [`inputResolution`, `inputResolution`, 3].\n   *\n   * @return A dictionary of base model's intermediate predictions.\n   * The returned dictionary should contains the following elements:\n   * heatmapScores: A Tensor3D that represents the heatmapScores.\n   * offsets: A Tensor3D that represents the offsets.\n   * displacementFwd: A Tensor3D that represents the forward displacement.\n   * displacementBwd: A Tensor3D that represents the backward displacement.\n   */\n  predict(input: tf.Tensor3D): {\n    heatmapScores: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D\n  } {\n    return tf.tidy(() => {\n      const asFloat = this.preprocessInput(tf.cast(input, 'float32'));\n      const asBatch = tf.expandDims(asFloat, 0);\n      const results = this.model.predict(asBatch) as tf.Tensor4D[];\n      const results3d: tf.Tensor3D[] = results.map(y => tf.squeeze(y, [0]));\n\n      const namedResults = this.nameOutputResults(results3d);\n\n      return {\n        heatmapScores: tf.sigmoid(namedResults.heatmap),\n        offsets: namedResults.offsets,\n        displacementFwd: namedResults.displacementFwd,\n        displacementBwd: namedResults.displacementBwd\n      };\n    });\n  }\n\n  // Because MobileNet and ResNet predict() methods output a different order for\n  // these values, we have a method that needs to be implemented to order them.\n  abstract nameOutputResults(results: tf.Tensor3D[]): {\n    heatmap: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D\n  };\n\n  /**\n   * Releases the CPU and GPU memory allocated by the model.\n   */\n  dispose() {\n    this.model.dispose();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BaseModel} from './base_model';\n\nexport class MobileNet extends BaseModel {\n  preprocessInput(input: tf.Tensor3D): tf.Tensor3D {\n    // Normalize the pixels [0, 255] to be between [-1, 1].\n    return tf.tidy(() => tf.sub(tf.div(input, 127.5), 1.0));\n  }\n\n  nameOutputResults(results: tf.Tensor3D[]) {\n    const [offsets, heatmap, displacementFwd, displacementBwd] = results;\n    return {offsets, heatmap, displacementFwd, displacementBwd};\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// algorithm based on Coursera Lecture from Algorithms, Part 1:\n// https://www.coursera.org/learn/algorithms-part1/lecture/ZjoSM/heapsort\n\nfunction half(k: number) {\n  return Math.floor(k / 2);\n}\n\nexport class MaxHeap<T> {\n  private priorityQueue: T[];\n  private numberOfElements: number;\n  private getElementValue: (element: T) => number;\n\n  constructor(maxSize: number, getElementValue: (element: T) => number) {\n    this.priorityQueue = new Array(maxSize);\n    this.numberOfElements = -1;\n    this.getElementValue = getElementValue;\n  }\n\n  public enqueue(x: T): void {\n    this.priorityQueue[++this.numberOfElements] = x;\n    this.swim(this.numberOfElements);\n  }\n\n  public dequeue(): T {\n    const max = this.priorityQueue[0];\n    this.exchange(0, this.numberOfElements--);\n    this.sink(0);\n    this.priorityQueue[this.numberOfElements + 1] = null;\n    return max;\n  }\n\n  public empty(): boolean {\n    return this.numberOfElements === -1;\n  }\n\n  public size(): number {\n    return this.numberOfElements + 1;\n  }\n\n  public all(): T[] {\n    return this.priorityQueue.slice(0, this.numberOfElements + 1);\n  }\n\n  public max(): T {\n    return this.priorityQueue[0];\n  }\n\n  private swim(k: number): void {\n    while (k > 0 && this.less(half(k), k)) {\n      this.exchange(k, half(k));\n      k = half(k);\n    }\n  }\n\n  private sink(k: number): void {\n    while (2 * k <= this.numberOfElements) {\n      let j = 2 * k;\n      if (j < this.numberOfElements && this.less(j, j + 1)) {\n        j++;\n      }\n      if (!this.less(k, j)) {\n        break;\n      }\n      this.exchange(k, j);\n      k = j;\n    }\n  }\n\n  private getValueAt(i: number): number {\n    return this.getElementValue(this.priorityQueue[i]);\n  }\n\n  private less(i: number, j: number): boolean {\n    return this.getValueAt(i) < this.getValueAt(j);\n  }\n\n  private exchange(i: number, j: number): void {\n    const t = this.priorityQueue[i];\n    this.priorityQueue[i] = this.priorityQueue[j];\n    this.priorityQueue[j] = t;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PartWithScore, TensorBuffer3D} from '../types';\n\nimport {MaxHeap} from './max_heap';\n\nfunction scoreIsMaximumInLocalWindow(\n    keypointId: number, score: number, heatmapY: number, heatmapX: number,\n    localMaximumRadius: number, scores: TensorBuffer3D): boolean {\n  const [height, width] = scores.shape;\n\n  let localMaximum = true;\n  const yStart = Math.max(heatmapY - localMaximumRadius, 0);\n  const yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);\n  for (let yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {\n    const xStart = Math.max(heatmapX - localMaximumRadius, 0);\n    const xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);\n    for (let xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {\n      if (scores.get(yCurrent, xCurrent, keypointId) > score) {\n        localMaximum = false;\n        break;\n      }\n    }\n    if (!localMaximum) {\n      break;\n    }\n  }\n\n  return localMaximum;\n}\n\n/**\n * Builds a priority queue with part candidate positions for a specific image in\n * the batch. For this we find all local maxima in the score maps with score\n * values above a threshold. We create a single priority queue across all parts.\n */\nexport function buildPartWithScoreQueue(\n    scoreThreshold: number, localMaximumRadius: number,\n    scores: TensorBuffer3D): MaxHeap<PartWithScore> {\n  const [height, width, numKeypoints] = scores.shape;\n\n  const queue = new MaxHeap<PartWithScore>(\n      height * width * numKeypoints, ({score}) => score);\n\n  for (let heatmapY = 0; heatmapY < height; ++heatmapY) {\n    for (let heatmapX = 0; heatmapX < width; ++heatmapX) {\n      for (let keypointId = 0; keypointId < numKeypoints; ++keypointId) {\n        const score = scores.get(heatmapY, heatmapX, keypointId);\n\n        // Only consider parts with score greater or equal to threshold as\n        // root candidates.\n        if (score < scoreThreshold) {\n          continue;\n        }\n\n        // Only consider keypoints whose score is maximum in a local window.\n        if (scoreIsMaximumInLocalWindow(\n                keypointId, score, heatmapY, heatmapX, localMaximumRadius,\n                scores)) {\n          queue.enqueue({score, part: {heatmapY, heatmapX, id: keypointId}});\n        }\n      }\n    }\n  }\n\n  return queue;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport type Tuple<T> = [T, T];\nexport type StringTuple = Tuple<string>;\nexport type NumberTuple = Tuple<number>;\n\nexport const partNames = [\n  'nose', 'leftEye', 'rightEye', 'leftEar', 'rightEar', 'leftShoulder',\n  'rightShoulder', 'leftElbow', 'rightElbow', 'leftWrist', 'rightWrist',\n  'leftHip', 'rightHip', 'leftKnee', 'rightKnee', 'leftAnkle', 'rightAnkle'\n];\n\nexport const NUM_KEYPOINTS = partNames.length;\n\nexport interface NumberDict {\n  [jointName: string]: number;\n}\n\nexport const partIds =\n    partNames.reduce((result: NumberDict, jointName, i): NumberDict => {\n      result[jointName] = i;\n      return result;\n    }, {}) as NumberDict;\n\nconst connectedPartNames: StringTuple[] = [\n  ['leftHip', 'leftShoulder'], ['leftElbow', 'leftShoulder'],\n  ['leftElbow', 'leftWrist'], ['leftHip', 'leftKnee'],\n  ['leftKnee', 'leftAnkle'], ['rightHip', 'rightShoulder'],\n  ['rightElbow', 'rightShoulder'], ['rightElbow', 'rightWrist'],\n  ['rightHip', 'rightKnee'], ['rightKnee', 'rightAnkle'],\n  ['leftShoulder', 'rightShoulder'], ['leftHip', 'rightHip']\n];\n\n/*\n * Define the skeleton. This defines the parent->child relationships of our\n * tree. Arbitrarily this defines the nose as the root of the tree, however\n * since we will infer the displacement for both parent->child and\n * child->parent, we can define the tree root as any node.\n */\nexport const poseChain: StringTuple[] = [\n  ['nose', 'leftEye'], ['leftEye', 'leftEar'], ['nose', 'rightEye'],\n  ['rightEye', 'rightEar'], ['nose', 'leftShoulder'],\n  ['leftShoulder', 'leftElbow'], ['leftElbow', 'leftWrist'],\n  ['leftShoulder', 'leftHip'], ['leftHip', 'leftKnee'],\n  ['leftKnee', 'leftAnkle'], ['nose', 'rightShoulder'],\n  ['rightShoulder', 'rightElbow'], ['rightElbow', 'rightWrist'],\n  ['rightShoulder', 'rightHip'], ['rightHip', 'rightKnee'],\n  ['rightKnee', 'rightAnkle']\n];\n\nexport const connectedPartIndices = connectedPartNames.map(\n    ([jointNameA, jointNameB]) => ([partIds[jointNameA], partIds[jointNameB]]));\n\nexport const partChannels: string[] = [\n  'left_face',\n  'right_face',\n  'right_upper_leg_front',\n  'right_lower_leg_back',\n  'right_upper_leg_back',\n  'left_lower_leg_front',\n  'left_upper_leg_front',\n  'left_upper_leg_back',\n  'left_lower_leg_back',\n  'right_feet',\n  'right_lower_leg_front',\n  'left_feet',\n  'torso_front',\n  'torso_back',\n  'right_upper_arm_front',\n  'right_upper_arm_back',\n  'right_lower_arm_back',\n  'left_lower_arm_front',\n  'left_upper_arm_front',\n  'left_upper_arm_back',\n  'left_lower_arm_back',\n  'right_hand',\n  'right_lower_arm_front',\n  'left_hand'\n];\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NUM_KEYPOINTS} from '../keypoints';\nimport {Part, TensorBuffer3D, Vector2D} from '../types';\n\nexport function getOffsetPoint(\n    y: number, x: number, keypoint: number, offsets: TensorBuffer3D): Vector2D {\n  return {\n    y: offsets.get(y, x, keypoint),\n    x: offsets.get(y, x, keypoint + NUM_KEYPOINTS)\n  };\n}\n\nexport function getImageCoords(\n    part: Part, outputStride: number, offsets: TensorBuffer3D): Vector2D {\n  const {heatmapY, heatmapX, id: keypoint} = part;\n  const {y, x} = getOffsetPoint(heatmapY, heatmapX, keypoint, offsets);\n  return {\n    x: part.heatmapX * outputStride + x,\n    y: part.heatmapY * outputStride + y\n  };\n}\n\nexport function fillArray<T>(element: T, size: number): T[] {\n  const result: T[] = new Array(size);\n\n  for (let i = 0; i < size; i++) {\n    result[i] = element;\n  }\n\n  return result;\n}\n\nexport function clamp(a: number, min: number, max: number): number {\n  if (a < min) {\n    return min;\n  }\n  if (a > max) {\n    return max;\n  }\n  return a;\n}\n\nexport function squaredDistance(\n    y1: number, x1: number, y2: number, x2: number): number {\n  const dy = y2 - y1;\n  const dx = x2 - x1;\n  return dy * dy + dx * dx;\n}\n\nexport function addVectors(a: Vector2D, b: Vector2D): Vector2D {\n  return {x: a.x + b.x, y: a.y + b.y};\n}\n\nexport function clampVector(a: Vector2D, min: number, max: number): Vector2D {\n  return {y: clamp(a.y, min, max), x: clamp(a.x, min, max)};\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumberTuple, partIds, partNames, poseChain} from '../keypoints';\nimport {Keypoint, PartWithScore, TensorBuffer3D, Vector2D} from '../types';\n\nimport {clamp, getOffsetPoint} from './util';\nimport {addVectors, getImageCoords} from './util';\n\nconst parentChildrenTuples: NumberTuple[] = poseChain.map(\n    ([parentJoinName, childJoinName]): NumberTuple =>\n        ([partIds[parentJoinName], partIds[childJoinName]]));\n\nconst parentToChildEdges: number[] =\n    parentChildrenTuples.map(([, childJointId]) => childJointId);\n\nconst childToParentEdges: number[] =\n    parentChildrenTuples.map(([\n                               parentJointId,\n                             ]) => parentJointId);\n\nfunction getDisplacement(\n    edgeId: number, point: Vector2D, displacements: TensorBuffer3D): Vector2D {\n  const numEdges = displacements.shape[2] / 2;\n  return {\n    y: displacements.get(point.y, point.x, edgeId),\n    x: displacements.get(point.y, point.x, numEdges + edgeId)\n  };\n}\n\nfunction getStridedIndexNearPoint(\n    point: Vector2D, outputStride: number, height: number,\n    width: number): Vector2D {\n  return {\n    y: clamp(Math.round(point.y / outputStride), 0, height - 1),\n    x: clamp(Math.round(point.x / outputStride), 0, width - 1)\n  };\n}\n\n/**\n * We get a new keypoint along the `edgeId` for the pose instance, assuming\n * that the position of the `idSource` part is already known. For this, we\n * follow the displacement vector from the source to target part (stored in\n * the `i`-t channel of the displacement tensor). The displaced keypoint\n * vector is refined using the offset vector by `offsetRefineStep` times.\n */\nfunction traverseToTargetKeypoint(\n    edgeId: number, sourceKeypoint: Keypoint, targetKeypointId: number,\n    scoresBuffer: TensorBuffer3D, offsets: TensorBuffer3D, outputStride: number,\n    displacements: TensorBuffer3D, offsetRefineStep = 2): Keypoint {\n  const [height, width] = scoresBuffer.shape;\n\n  // Nearest neighbor interpolation for the source->target displacements.\n  const sourceKeypointIndices = getStridedIndexNearPoint(\n      sourceKeypoint.position, outputStride, height, width);\n\n  const displacement =\n      getDisplacement(edgeId, sourceKeypointIndices, displacements);\n\n  const displacedPoint = addVectors(sourceKeypoint.position, displacement);\n  let targetKeypoint = displacedPoint;\n  for (let i = 0; i < offsetRefineStep; i++) {\n    const targetKeypointIndices =\n        getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\n\n    const offsetPoint = getOffsetPoint(\n        targetKeypointIndices.y, targetKeypointIndices.x, targetKeypointId,\n        offsets);\n\n    targetKeypoint = addVectors(\n        {\n          x: targetKeypointIndices.x * outputStride,\n          y: targetKeypointIndices.y * outputStride\n        },\n        {x: offsetPoint.x, y: offsetPoint.y});\n  }\n  const targetKeyPointIndices =\n      getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\n  const score = scoresBuffer.get(\n      targetKeyPointIndices.y, targetKeyPointIndices.x, targetKeypointId);\n\n  return {position: targetKeypoint, part: partNames[targetKeypointId], score};\n}\n\n/**\n * Follows the displacement fields to decode the full pose of the object\n * instance given the position of a part that acts as root.\n *\n * @return An array of decoded keypoints and their scores for a single pose\n */\nexport function decodePose(\n    root: PartWithScore, scores: TensorBuffer3D, offsets: TensorBuffer3D,\n    outputStride: number, displacementsFwd: TensorBuffer3D,\n    displacementsBwd: TensorBuffer3D): Keypoint[] {\n  const numParts = scores.shape[2];\n  const numEdges = parentToChildEdges.length;\n\n  const instanceKeypoints: Keypoint[] = new Array(numParts);\n  // Start a new detection instance at the position of the root.\n  const {part: rootPart, score: rootScore} = root;\n  const rootPoint = getImageCoords(rootPart, outputStride, offsets);\n\n  instanceKeypoints[rootPart.id] = {\n    score: rootScore,\n    part: partNames[rootPart.id],\n    position: rootPoint\n  };\n\n  // Decode the part positions upwards in the tree, following the backward\n  // displacements.\n  for (let edge = numEdges - 1; edge >= 0; --edge) {\n    const sourceKeypointId = parentToChildEdges[edge];\n    const targetKeypointId = childToParentEdges[edge];\n    if (instanceKeypoints[sourceKeypointId] &&\n        !instanceKeypoints[targetKeypointId]) {\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(\n          edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores,\n          offsets, outputStride, displacementsBwd);\n    }\n  }\n\n  // Decode the part positions downwards in the tree, following the forward\n  // displacements.\n  for (let edge = 0; edge < numEdges; ++edge) {\n    const sourceKeypointId = childToParentEdges[edge];\n    const targetKeypointId = parentToChildEdges[edge];\n    if (instanceKeypoints[sourceKeypointId] &&\n        !instanceKeypoints[targetKeypointId]) {\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(\n          edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores,\n          offsets, outputStride, displacementsFwd);\n    }\n  }\n\n  return instanceKeypoints;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Keypoint, Pose, TensorBuffer3D} from '../types';\n\nimport {buildPartWithScoreQueue} from './build_part_with_score_queue';\nimport {decodePose} from './decode_pose';\nimport {getImageCoords, squaredDistance} from './util';\n\nfunction withinNmsRadiusOfCorrespondingPoint(\n    poses: Pose[], squaredNmsRadius: number, {x, y}: {x: number, y: number},\n    keypointId: number): boolean {\n  return poses.some(({keypoints}) => {\n    const correspondingKeypoint = keypoints[keypointId].position;\n    return squaredDistance(\n               y, x, correspondingKeypoint.y, correspondingKeypoint.x) <=\n        squaredNmsRadius;\n  });\n}\n\n/* Score the newly proposed object instance without taking into account\n * the scores of the parts that overlap with any previously detected\n * instance.\n */\nfunction getInstanceScore(\n    existingPoses: Pose[], squaredNmsRadius: number,\n    instanceKeypoints: Keypoint[]): number {\n  let notOverlappedKeypointScores = instanceKeypoints.reduce(\n      (result, {position, score}, keypointId): number => {\n        if (!withinNmsRadiusOfCorrespondingPoint(\n                existingPoses, squaredNmsRadius, position, keypointId)) {\n          result += score;\n        }\n        return result;\n      }, 0.0);\n\n  return notOverlappedKeypointScores /= instanceKeypoints.length;\n}\n\n// A point (y, x) is considered as root part candidate if its score is a\n// maximum in a window |y - y'| <= kLocalMaximumRadius, |x - x'| <=\n// kLocalMaximumRadius.\nconst kLocalMaximumRadius = 1;\n\n/**\n * Detects multiple poses and finds their parts from part scores and\n * displacement vectors. It returns up to `maxDetections` object instance\n * detections in decreasing root score order. It works as follows: We first\n * create a priority queue with local part score maxima above\n * `scoreThreshold`, considering all parts at the same time. Then we\n * iteratively pull the top  element of the queue (in decreasing score order)\n * and treat it as a root candidate for a new object instance. To avoid\n * duplicate detections, we reject the root candidate if it is within a disk\n * of `nmsRadius` pixels from the corresponding part of a previously detected\n * instance, which is a form of part-based non-maximum suppression (NMS). If\n * the root candidate passes the NMS check, we start a new object instance\n * detection, treating the corresponding part as root and finding the\n * positions of the remaining parts by following the displacement vectors\n * along the tree-structured part graph. We assign to the newly detected\n * instance a score equal to the sum of scores of its parts which have not\n * been claimed by a previous instance (i.e., those at least `nmsRadius`\n * pixels away from the corresponding part of all previously detected\n * instances), divided by the total number of parts `numParts`.\n *\n * @param heatmapScores 3-D tensor with shape `[height, width, numParts]`.\n * The value of heatmapScores[y, x, k]` is the score of placing the `k`-th\n * object part at position `(y, x)`.\n *\n * @param offsets 3-D tensor with shape `[height, width, numParts * 2]`.\n * The value of [offsets[y, x, k], offsets[y, x, k + numParts]]` is the\n * short range offset vector of the `k`-th  object part at heatmap\n * position `(y, x)`.\n *\n * @param displacementsFwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the forward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param displacementsBwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the backward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param outputStride The output stride that was used when feed-forwarding\n * through the PoseNet model.  Must be 32, 16, or 8.\n *\n * @param maxPoseDetections Maximum number of returned instance detections per\n * image.\n *\n * @param scoreThreshold Only return instance detections that have root part\n * score greater or equal to this value. Defaults to 0.5.\n *\n * @param nmsRadius Non-maximum suppression part distance. It needs to be\n * strictly positive. Two parts suppress each other if they are less than\n * `nmsRadius` pixels away. Defaults to 20.\n *\n * @return An array of poses and their scores, each containing keypoints and\n * the corresponding keypoint scores.\n */\nexport function decodeMultiplePoses(\n    scoresBuffer: TensorBuffer3D, offsetsBuffer: TensorBuffer3D,\n    displacementsFwdBuffer: TensorBuffer3D,\n    displacementsBwdBuffer: TensorBuffer3D, outputStride: number,\n    maxPoseDetections: number, scoreThreshold = 0.5, nmsRadius = 20): Pose[] {\n  const poses: Pose[] = [];\n\n  const queue = buildPartWithScoreQueue(\n      scoreThreshold, kLocalMaximumRadius, scoresBuffer);\n\n  const squaredNmsRadius = nmsRadius * nmsRadius;\n\n  // Generate at most maxDetections object instances per image in\n  // decreasing root part score order.\n  while (poses.length < maxPoseDetections && !queue.empty()) {\n    // The top element in the queue is the next root candidate.\n    const root = queue.dequeue();\n\n    // Part-based non-maximum suppression: We reject a root candidate if it\n    // is within a disk of `nmsRadius` pixels from the corresponding part of\n    // a previously detected instance.\n    const rootImageCoords =\n        getImageCoords(root.part, outputStride, offsetsBuffer);\n    if (withinNmsRadiusOfCorrespondingPoint(\n            poses, squaredNmsRadius, rootImageCoords, root.part.id)) {\n      continue;\n    }\n\n    // Start a new detection instance at the position of the root.\n    const keypoints = decodePose(\n        root, scoresBuffer, offsetsBuffer, outputStride, displacementsFwdBuffer,\n        displacementsBwdBuffer);\n\n    const score = getInstanceScore(poses, squaredNmsRadius, keypoints);\n\n    poses.push({keypoints, score});\n  }\n\n  return poses;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nfunction mod(a: tf.Tensor1D, b: number): tf.Tensor1D {\n  return tf.tidy(() => {\n    const floored = tf.div(a, tf.scalar(b, 'int32'));\n\n    return tf.sub(a, tf.mul(floored, tf.scalar(b, 'int32')));\n  });\n}\n\nexport function argmax2d(inputs: tf.Tensor3D): tf.Tensor2D {\n  const [height, width, depth] = inputs.shape;\n\n  return tf.tidy(() => {\n    const reshaped = tf.reshape(inputs, [height * width, depth]);\n    const coords = tf.argMax(reshaped, 0);\n\n    const yCoords = tf.expandDims(tf.div(coords, tf.scalar(width, 'int32')), 1);\n    const xCoords = tf.expandDims(mod(coords as tf.Tensor1D, width), 1);\n\n    return tf.concat([yCoords, xCoords], 1);\n  }) as tf.Tensor2D;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {NUM_KEYPOINTS} from '../keypoints';\nimport {Vector2D} from '../types';\n\nexport function getPointsConfidence(\n    heatmapScores: tf.TensorBuffer<tf.Rank.R3>,\n    heatMapCoords: tf.TensorBuffer<tf.Rank.R2>): Float32Array {\n  const numKeypoints = heatMapCoords.shape[0];\n  const result = new Float32Array(numKeypoints);\n\n  for (let keypoint = 0; keypoint < numKeypoints; keypoint++) {\n    const y = heatMapCoords.get(keypoint, 0);\n    const x = heatMapCoords.get(keypoint, 1);\n    result[keypoint] = heatmapScores.get(y, x, keypoint);\n  }\n\n  return result;\n}\n\nfunction getOffsetPoint(\n    y: number, x: number, keypoint: number,\n    offsetsBuffer: tf.TensorBuffer<tf.Rank.R3>): Vector2D {\n  return {\n    y: offsetsBuffer.get(y, x, keypoint),\n    x: offsetsBuffer.get(y, x, keypoint + NUM_KEYPOINTS)\n  };\n}\n\nexport function getOffsetVectors(\n    heatMapCoordsBuffer: tf.TensorBuffer<tf.Rank.R2>,\n    offsetsBuffer: tf.TensorBuffer<tf.Rank.R3>): tf.Tensor2D {\n  const result: number[] = [];\n\n  for (let keypoint = 0; keypoint < NUM_KEYPOINTS; keypoint++) {\n    const heatmapY = heatMapCoordsBuffer.get(keypoint, 0).valueOf();\n    const heatmapX = heatMapCoordsBuffer.get(keypoint, 1).valueOf();\n\n    const {x, y} = getOffsetPoint(heatmapY, heatmapX, keypoint, offsetsBuffer);\n\n    result.push(y);\n    result.push(x);\n  }\n\n  return tf.tensor2d(result, [NUM_KEYPOINTS, 2]);\n}\n\nexport function getOffsetPoints(\n    heatMapCoordsBuffer: tf.TensorBuffer<tf.Rank.R2>, outputStride: number,\n    offsetsBuffer: tf.TensorBuffer<tf.Rank.R3>): tf.Tensor2D {\n  return tf.tidy(() => {\n    const offsetVectors = getOffsetVectors(heatMapCoordsBuffer, offsetsBuffer);\n\n    return tf\n        .add(tf\n          .cast(tf\n            .mul(heatMapCoordsBuffer.toTensor(), tf.scalar(outputStride,\n              'int32')), 'float32'), offsetVectors);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {partNames} from '../keypoints';\nimport {Keypoint, Pose, PoseNetOutputStride} from '../types';\n\nimport {argmax2d} from './argmax2d';\nimport {getOffsetPoints, getPointsConfidence} from './util';\n\n/**\n * Detects a single pose and finds its parts from part scores and offset\n * vectors. It returns a single pose detection. It works as follows:\n * argmax2d is done on the scores to get the y and x index in the heatmap\n * with the highest score for each part, which is essentially where the\n * part is most likely to exist. This produces a tensor of size 17x2, with\n * each row being the y and x index in the heatmap for each keypoint.\n * The offset vector for each for each part is retrieved by getting the\n * y and x from the offsets corresponding to the y and x index in the\n * heatmap for that part. This produces a tensor of size 17x2, with each\n * row being the offset vector for the corresponding keypoint.\n * To get the keypoint, each part’s heatmap y and x are multiplied\n * by the output stride then added to their corresponding offset vector,\n * which is in the same scale as the original image.\n *\n * @param heatmapScores 3-D tensor with shape `[height, width, numParts]`.\n * The value of heatmapScores[y, x, k]` is the score of placing the `k`-th\n * object part at position `(y, x)`.\n *\n * @param offsets 3-D tensor with shape `[height, width, numParts * 2]`.\n * The value of [offsets[y, x, k], offsets[y, x, k + numParts]]` is the\n * short range offset vector of the `k`-th  object part at heatmap\n * position `(y, x)`.\n *\n * @param outputStride The output stride that was used when feed-forwarding\n * through the PoseNet model.  Must be 32, 16, or 8.\n *\n * @return A promise that resolves with single pose with a confidence score,\n * which contains an array of keypoints indexed by part id, each with a score\n * and position.\n */\nexport async function decodeSinglePose(\n    heatmapScores: tf.Tensor3D, offsets: tf.Tensor3D,\n    outputStride: PoseNetOutputStride): Promise<Pose> {\n  let totalScore = 0.0;\n\n  const heatmapValues = argmax2d(heatmapScores);\n\n  const allTensorBuffers = await Promise.all(\n      [heatmapScores.buffer(), offsets.buffer(), heatmapValues.buffer()]);\n\n  const scoresBuffer = allTensorBuffers[0];\n  const offsetsBuffer = allTensorBuffers[1];\n  const heatmapValuesBuffer = allTensorBuffers[2];\n\n  const offsetPoints =\n      getOffsetPoints(heatmapValuesBuffer, outputStride, offsetsBuffer);\n  const offsetPointsBuffer = await offsetPoints.buffer();\n\n  const keypointConfidence =\n      Array.from(getPointsConfidence(scoresBuffer, heatmapValuesBuffer));\n\n  const keypoints = keypointConfidence.map((score, keypointId): Keypoint => {\n    totalScore += score;\n    return {\n      position: {\n        y: offsetPointsBuffer.get(keypointId, 0),\n        x: offsetPointsBuffer.get(keypointId, 1)\n      },\n      part: partNames[keypointId],\n      score\n    };\n  });\n\n  heatmapValues.dispose();\n  offsetPoints.dispose();\n\n  return {keypoints, score: totalScore / keypoints.length};\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst MOBILENET_BASE_URL =\n    'https://storage.googleapis.com/tfjs-models/savedmodel/posenet/mobilenet/';\nconst RESNET50_BASE_URL =\n    'https://storage.googleapis.com/tfjs-models/savedmodel/posenet/resnet50/';\n\n// The PoseNet 2.0 ResNet50 models use the latest TensorFlow.js 1.0 model\n// format.\nexport function resNet50Checkpoint(stride: number, quantBytes: number): string {\n  const graphJson = `model-stride${stride}.json`;\n  // quantBytes=4 corresponding to the non-quantized full-precision checkpoints.\n  if (quantBytes === 4) {\n    return RESNET50_BASE_URL + `float/` + graphJson;\n  } else {\n    return RESNET50_BASE_URL + `quant${quantBytes}/` + graphJson;\n  }\n}\n\n// The PoseNet 2.0 MobileNetV1 models use the latest TensorFlow.js 1.0 model\n// format.\nexport function mobileNetCheckpoint(\n    stride: number, multiplier: number, quantBytes: number): string {\n  const toStr: {[key: number]: string} = {1.0: '100', 0.75: '075', 0.50: '050'};\n  const graphJson = `model-stride${stride}.json`;\n  // quantBytes=4 corresponding to the non-quantized full-precision checkpoints.\n  if (quantBytes === 4) {\n    return MOBILENET_BASE_URL + `float/${toStr[multiplier]}/` + graphJson;\n  } else {\n    return MOBILENET_BASE_URL + `quant${quantBytes}/${toStr[multiplier]}/` +\n        graphJson;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {BaseModel} from './base_model';\n\nconst imageNetMean = [-123.15, -115.90, -103.06];\n\nexport class ResNet extends BaseModel {\n  preprocessInput(input: tf.Tensor3D): tf.Tensor3D {\n    return tf.add(input, imageNetMean);\n  }\n\n  nameOutputResults(results: tf.Tensor3D[]) {\n    const [displacementFwd, displacementBwd, offsets, heatmap] = results;\n    return {offsets, heatmap, displacementFwd, displacementBwd};\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {connectedPartIndices} from './keypoints';\nimport {InputResolution, Keypoint, Padding, Pose, PosenetInput, PoseNetOutputStride, TensorBuffer3D, Vector2D} from './types';\n\nfunction eitherPointDoesntMeetConfidence(\n    a: number, b: number, minConfidence: number): boolean {\n  return (a < minConfidence || b < minConfidence);\n}\n\nexport function getAdjacentKeyPoints(\n    keypoints: Keypoint[], minConfidence: number): Keypoint[][] {\n  return connectedPartIndices.reduce(\n      (result: Keypoint[][], [leftJoint, rightJoint]): Keypoint[][] => {\n        if (eitherPointDoesntMeetConfidence(\n                keypoints[leftJoint].score, keypoints[rightJoint].score,\n                minConfidence)) {\n          return result;\n        }\n\n        result.push([keypoints[leftJoint], keypoints[rightJoint]]);\n\n        return result;\n      }, []);\n}\n\nconst {NEGATIVE_INFINITY, POSITIVE_INFINITY} = Number;\nexport function getBoundingBox(keypoints: Keypoint[]):\n    {maxX: number, maxY: number, minX: number, minY: number} {\n  return keypoints.reduce(({maxX, maxY, minX, minY}, {position: {x, y}}) => {\n    return {\n      maxX: Math.max(maxX, x),\n      maxY: Math.max(maxY, y),\n      minX: Math.min(minX, x),\n      minY: Math.min(minY, y)\n    };\n  }, {\n    maxX: NEGATIVE_INFINITY,\n    maxY: NEGATIVE_INFINITY,\n    minX: POSITIVE_INFINITY,\n    minY: POSITIVE_INFINITY\n  });\n}\n\nexport function getBoundingBoxPoints(keypoints: Keypoint[]): Vector2D[] {\n  const {minX, minY, maxX, maxY} = getBoundingBox(keypoints);\n  return [\n    {x: minX, y: minY}, {x: maxX, y: minY}, {x: maxX, y: maxY},\n    {x: minX, y: maxY}\n  ];\n}\n\nexport async function toTensorBuffers3D(tensors: tf.Tensor3D[]):\n    Promise<TensorBuffer3D[]> {\n  return Promise.all(tensors.map(tensor => tensor.buffer()));\n}\n\nexport function scalePose(\n    pose: Pose, scaleY: number, scaleX: number, offsetY = 0,\n    offsetX = 0): Pose {\n  return {\n    score: pose.score,\n    keypoints: pose.keypoints.map(({score, part, position}) => ({\n                                    score,\n                                    part,\n                                    position: {\n                                      x: position.x * scaleX + offsetX,\n                                      y: position.y * scaleY + offsetY\n                                    }\n                                  }))\n  };\n}\n\nexport function scalePoses(\n    poses: Pose[], scaleY: number, scaleX: number, offsetY = 0, offsetX = 0) {\n  if (scaleX === 1 && scaleY === 1 && offsetY === 0 && offsetX === 0) {\n    return poses;\n  }\n  return poses.map(pose => scalePose(pose, scaleY, scaleX, offsetY, offsetX));\n}\n\nexport function flipPoseHorizontal(pose: Pose, imageWidth: number): Pose {\n  return {\n    score: pose.score,\n    keypoints: pose.keypoints.map(\n        ({score, part, position}) => ({\n          score,\n          part,\n          position: {x: imageWidth - 1 - position.x, y: position.y}\n        }))\n  };\n}\n\nexport function flipPosesHorizontal(poses: Pose[], imageWidth: number) {\n  if (imageWidth <= 0) {\n    return poses;\n  }\n  return poses.map(pose => flipPoseHorizontal(pose, imageWidth));\n}\n\nexport function toValidInputResolution(\n    inputResolution: number, outputStride: PoseNetOutputStride): number {\n  if (isValidInputResolution(inputResolution, outputStride)) {\n    return inputResolution;\n  }\n\n  return Math.floor(inputResolution / outputStride) * outputStride + 1;\n}\n\nexport function validateInputResolution(inputResolution: InputResolution) {\n  tf.util.assert(\n      typeof inputResolution === 'number' ||\n          typeof inputResolution === 'object',\n      () => `Invalid inputResolution ${inputResolution}. ` +\n          `Should be a number or an object with width and height`);\n\n  if (typeof inputResolution === 'object') {\n    tf.util.assert(\n        typeof inputResolution.width === 'number',\n        () => `inputResolution.width has a value of ${\n            inputResolution.width} which is invalid; it must be a number`);\n    tf.util.assert(\n        typeof inputResolution.height === 'number',\n        () => `inputResolution.height has a value of ${\n            inputResolution.height} which is invalid; it must be a number`);\n  }\n}\n\nexport function getValidInputResolutionDimensions(\n    inputResolution: InputResolution,\n    outputStride: PoseNetOutputStride): [number, number] {\n  validateInputResolution(inputResolution);\n  if (typeof inputResolution === 'object') {\n    return [\n      toValidInputResolution(inputResolution.height, outputStride),\n      toValidInputResolution(inputResolution.width, outputStride),\n    ];\n  } else {\n    return [\n      toValidInputResolution(inputResolution, outputStride),\n      toValidInputResolution(inputResolution, outputStride),\n    ];\n  }\n}\n\nconst VALID_OUTPUT_STRIDES: PoseNetOutputStride[] = [8, 16, 32];\nexport function assertValidOutputStride(outputStride: PoseNetOutputStride) {\n  tf.util.assert(\n      typeof outputStride === 'number', () => 'outputStride is not a number');\n  tf.util.assert(\n      VALID_OUTPUT_STRIDES.indexOf(outputStride) >= 0,\n      () => `outputStride of ${outputStride} is invalid. ` +\n          `It must be either 8, 16, or 32`);\n}\n\nfunction isValidInputResolution(\n    resolution: number, outputStride: number): boolean {\n  return (resolution - 1) % outputStride === 0;\n}\n\nexport function assertValidResolution(\n    resolution: [number, number], outputStride: number) {\n  tf.util.assert(\n      typeof resolution[0] === 'number' && typeof resolution[1] === 'number',\n      () => `both resolution values must be a number but had values ${\n          resolution}`);\n\n  tf.util.assert(\n      isValidInputResolution(resolution[0], outputStride),\n      () => `height of ${resolution[0]} is invalid for output stride ` +\n          `${outputStride}.`);\n\n  tf.util.assert(\n      isValidInputResolution(resolution[1], outputStride),\n      () => `width of ${resolution[1]} is invalid for output stride ` +\n          `${outputStride}.`);\n}\n\nexport function getInputTensorDimensions(input: PosenetInput):\n    [number, number] {\n  return input instanceof tf.Tensor ? [input.shape[0], input.shape[1]] :\n                                      [input.height, input.width];\n}\n\nexport function toInputTensor(input: PosenetInput) {\n  return input instanceof tf.Tensor ? input : tf.browser.fromPixels(input);\n}\n\nexport function toResizedInputTensor(\n    input: PosenetInput, resizeHeight: number, resizeWidth: number,\n    flipHorizontal: boolean): tf.Tensor3D {\n  return tf.tidy(() => {\n    const imageTensor = toInputTensor(input);\n\n    if (flipHorizontal) {\n      return tf.image.resizeBilinear(tf.reverse(imageTensor, 1), [resizeHeight, resizeWidth]);\n    } else {\n      return tf.image.resizeBilinear(imageTensor, [resizeHeight, resizeWidth]);\n    }\n  });\n}\n\nexport function padAndResizeTo(\n    input: PosenetInput, [targetH, targetW]: [number, number]):\n    {resized: tf.Tensor3D, padding: Padding} {\n  const [height, width] = getInputTensorDimensions(input);\n  const targetAspect = targetW / targetH;\n  const aspect = width / height;\n  let [padT, padB, padL, padR] = [0, 0, 0, 0];\n  if (aspect < targetAspect) {\n    // pads the width\n    padT = 0;\n    padB = 0;\n    padL = Math.round(0.5 * (targetAspect * height - width));\n    padR = Math.round(0.5 * (targetAspect * height - width));\n  } else {\n    // pads the height\n    padT = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\n    padB = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\n    padL = 0;\n    padR = 0;\n  }\n\n  const resized: tf.Tensor3D = tf.tidy(() => {\n    let imageTensor = toInputTensor(input);\n    imageTensor = tf.pad3d(imageTensor, [[padT, padB], [padL, padR], [0, 0]]);\n\n    return tf.image.resizeBilinear(imageTensor, [targetH, targetW]);\n  });\n\n  return {resized, padding: {top: padT, left: padL, right: padR, bottom: padB}};\n}\n\nexport function scaleAndFlipPoses(\n    poses: Pose[], [height, width]: [number, number],\n    [inputResolutionHeight, inputResolutionWidth]: [number, number],\n    padding: Padding, flipHorizontal: boolean): Pose[] {\n  const scaleY =\n      (height + padding.top + padding.bottom) / (inputResolutionHeight);\n  const scaleX =\n      (width + padding.left + padding.right) / (inputResolutionWidth);\n\n  const scaledPoses =\n      scalePoses(poses, scaleY, scaleX, -padding.top, -padding.left);\n\n  if (flipHorizontal) {\n    return flipPosesHorizontal(scaledPoses, width);\n  } else {\n    return scaledPoses;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfconv from '@tensorflow/tfjs-converter';\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {BaseModel} from './base_model';\nimport {mobileNetCheckpoint, resNet50Checkpoint} from './checkpoints';\nimport {MobileNet} from './mobilenet';\nimport {decodeMultiplePoses} from './multi_pose/decode_multiple_poses';\nimport {ResNet} from './resnet';\nimport {decodeSinglePose} from './single_pose/decode_single_pose';\nimport {InputResolution, MobileNetMultiplier, Pose, PoseNetArchitecture, PosenetInput, PoseNetOutputStride, PoseNetQuantBytes} from './types';\nimport {assertValidOutputStride, assertValidResolution, getInputTensorDimensions, getValidInputResolutionDimensions, padAndResizeTo, scaleAndFlipPoses, toTensorBuffers3D, validateInputResolution} from './util';\n\n/**\n * PoseNet model loading is configurable using the following config dictionary.\n *\n * `architecture`: PoseNetArchitecture. It determines wich PoseNet architecture\n * to load. The supported architectures are: MobileNetV1 and ResNet.\n *\n * `outputStride`: Specifies the output stride of the PoseNet model.\n * The smaller the value, the larger the output resolution, and more accurate\n * the model at the cost of speed.  Set this to a larger value to increase speed\n * at the cost of accuracy. Stride 32 is supported for ResNet and\n * stride 8,16,32 are supported for various MobileNetV1 models.\n *\n * * `inputResolution`: A number or an Object of type {width: number, height:\n * number}. Specifies the size the input image is scaled to before feeding it\n * through the PoseNet model.  The larger the value, more accurate the model at\n * the cost of speed. Set this to a smaller value to increase speed at the cost\n * of accuracy. If a number is provided, the input will be resized and padded to\n * be a square with the same width and height.  If width and height are\n * provided, the input will be resized and padded to the specified width and\n * height.\n *\n * `multiplier`: An optional number with values: 1.01, 1.0, 0.75, or\n * 0.50. The value is used only by MobileNet architecture. It is the float\n * multiplier for the depth (number of channels) for all convolution ops.\n * The larger the value, the larger the size of the layers, and more accurate\n * the model at the cost of speed. Set this to a smaller value to increase speed\n * at the cost of accuracy.\n *\n * `modelUrl`: An optional string that specifies custom url of the model. This\n * is useful for area/countries that don't have access to the model hosted on\n * GCP.\n *\n * `quantBytes`: An opional number with values: 1, 2, or 4.  This parameter\n * affects weight quantization in the models. The available options are\n * 1 byte, 2 bytes, and 4 bytes. The higher the value, the larger the model size\n * and thus the longer the loading time, the lower the value, the shorter the\n * loading time but lower the accuracy.\n */\nexport interface ModelConfig {\n  architecture: PoseNetArchitecture;\n  outputStride: PoseNetOutputStride;\n  inputResolution: InputResolution;\n  multiplier?: MobileNetMultiplier;\n  modelUrl?: string;\n  quantBytes?: PoseNetQuantBytes;\n}\n\n// The default configuration for loading MobileNetV1 based PoseNet.\n//\n// (And for references, the default configuration for loading ResNet\n// based PoseNet is also included).\n//\n// ```\n// const RESNET_CONFIG = {\n//   architecture: 'ResNet50',\n//   outputStride: 32,\n//   quantBytes: 2,\n// } as ModelConfig;\n// ```\nconst MOBILENET_V1_CONFIG: ModelConfig = {\n  architecture: 'MobileNetV1',\n  outputStride: 16,\n  multiplier: 0.75,\n  inputResolution: 257,\n} as ModelConfig;\n\nconst VALID_ARCHITECTURE = ['MobileNetV1', 'ResNet50'];\nconst VALID_STRIDE = {\n  'MobileNetV1': [8, 16, 32],\n  'ResNet50': [32, 16]\n};\n\nconst VALID_MULTIPLIER = {\n  'MobileNetV1': [0.50, 0.75, 1.0],\n  'ResNet50': [1.0]\n};\nconst VALID_QUANT_BYTES = [1, 2, 4];\n\nfunction validateModelConfig(config: ModelConfig) {\n  config = config || MOBILENET_V1_CONFIG;\n\n  if (config.architecture == null) {\n    config.architecture = 'MobileNetV1';\n  }\n  if (VALID_ARCHITECTURE.indexOf(config.architecture) < 0) {\n    throw new Error(\n        `Invalid architecture ${config.architecture}. ` +\n        `Should be one of ${VALID_ARCHITECTURE}`);\n  }\n\n  if (config.inputResolution == null) {\n    config.inputResolution = 257;\n  }\n\n  validateInputResolution(config.inputResolution);\n\n  if (config.outputStride == null) {\n    config.outputStride = 16;\n  }\n  if (VALID_STRIDE[config.architecture].indexOf(config.outputStride) < 0) {\n    throw new Error(\n        `Invalid outputStride ${config.outputStride}. ` +\n        `Should be one of ${VALID_STRIDE[config.architecture]} ` +\n        `for architecture ${config.architecture}.`);\n  }\n\n  if (config.multiplier == null) {\n    config.multiplier = 1.0;\n  }\n  if (VALID_MULTIPLIER[config.architecture].indexOf(config.multiplier) < 0) {\n    throw new Error(\n        `Invalid multiplier ${config.multiplier}. ` +\n        `Should be one of ${VALID_MULTIPLIER[config.architecture]} ` +\n        `for architecture ${config.architecture}.`);\n  }\n\n  if (config.quantBytes == null) {\n    config.quantBytes = 4;\n  }\n  if (VALID_QUANT_BYTES.indexOf(config.quantBytes) < 0) {\n    throw new Error(\n        `Invalid quantBytes ${config.quantBytes}. ` +\n        `Should be one of ${VALID_QUANT_BYTES} ` +\n        `for architecture ${config.architecture}.`);\n  }\n\n  if (config.architecture === 'MobileNetV1' && config.outputStride === 32 &&\n      config.multiplier !== 1) {\n    throw new Error(\n        `When using an output stride of 32, ` +\n        `you must select 1 as the multiplier.`);\n  }\n\n  return config;\n}\n\n/**\n * PoseNet inference is configurable using the following config dictionary.\n *\n * `flipHorizontal`: If the poses should be flipped/mirrored horizontally.\n * This should be set to true for videos where the video is by default flipped\n * horizontally (i.e. a webcam), and you want the poses to be returned in the\n * proper orientation.\n *\n */\nexport interface InferenceConfig {\n  flipHorizontal: boolean;\n}\n\n/**\n * Single Person Inference Config\n */\nexport interface SinglePersonInterfaceConfig extends InferenceConfig {}\n\n/**\n * Multiple Person Inference Config\n *\n * `maxDetections`: Maximum number of returned instance detections per image.\n *\n * `scoreThreshold`: Only return instance detections that have root part\n * score greater or equal to this value. Defaults to 0.5\n *\n * `nmsRadius`: Non-maximum suppression part distance in pixels. It needs\n * to be strictly positive. Two parts suppress each other if they are less\n * than `nmsRadius` pixels away. Defaults to 20.\n */\nexport interface MultiPersonInferenceConfig extends InferenceConfig {\n  maxDetections?: number;\n  scoreThreshold?: number;\n  nmsRadius?: number;\n}\n\n// these added back to not break the existing api.\nexport interface LegacyMultiPersonInferenceConfig extends\n    MultiPersonInferenceConfig {\n  decodingMethod: 'multi-person';\n}\n\nexport interface LegacySinglePersonInferenceConfig extends\n    SinglePersonInterfaceConfig {\n  decodingMethod: 'single-person';\n}\n\nexport const SINGLE_PERSON_INFERENCE_CONFIG: SinglePersonInterfaceConfig = {\n  flipHorizontal: false\n};\n\nexport const MULTI_PERSON_INFERENCE_CONFIG: MultiPersonInferenceConfig = {\n  flipHorizontal: false,\n  maxDetections: 5,\n  scoreThreshold: 0.5,\n  nmsRadius: 20\n};\n\nfunction validateSinglePersonInferenceConfig(\n    config: SinglePersonInterfaceConfig) {}\n\nfunction validateMultiPersonInputConfig(config: MultiPersonInferenceConfig) {\n  const {maxDetections, scoreThreshold, nmsRadius} = config;\n\n  if (maxDetections <= 0) {\n    throw new Error(\n        `Invalid maxDetections ${maxDetections}. ` +\n        `Should be > 0`);\n  }\n\n  if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\n    throw new Error(\n        `Invalid scoreThreshold ${scoreThreshold}. ` +\n        `Should be in range [0.0, 1.0]`);\n  }\n\n  if (nmsRadius <= 0) {\n    throw new Error(`Invalid nmsRadius ${nmsRadius}.`);\n  }\n}\n\nexport class PoseNet {\n  readonly baseModel: BaseModel;\n  readonly inputResolution: [number, number];\n\n  constructor(net: BaseModel, inputResolution: [number, number]) {\n    assertValidOutputStride(net.outputStride);\n    assertValidResolution(inputResolution, net.outputStride);\n\n    this.baseModel = net;\n    this.inputResolution = inputResolution;\n  }\n\n  /**\n   * Infer through PoseNet, and estimates multiple poses using the outputs.\n   * This does standard ImageNet pre-processing before inferring through the\n   * model. The image should pixels should have values [0-255]. It detects\n   * multiple poses and finds their parts from part scores and displacement\n   * vectors using a fast greedy decoding algorithm.  It returns up to\n   * `config.maxDetections` object instance detections in decreasing root\n   * score order.\n   *\n   * @param input\n   * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\n   * image to feed through the network.\n   *\n   * @param config MultiPoseEstimationConfig object that contains parameters\n   * for the PoseNet inference using multiple pose estimation.\n   *\n   * @return An array of poses and their scores, each containing keypoints and\n   * the corresponding keypoint scores.  The positions of the keypoints are\n   * in the same scale as the original image\n   */\n  async estimateMultiplePoses(\n      input: PosenetInput,\n      config: MultiPersonInferenceConfig = MULTI_PERSON_INFERENCE_CONFIG):\n      Promise<Pose[]> {\n    const configWithDefaults: MultiPersonInferenceConfig = {\n      ...MULTI_PERSON_INFERENCE_CONFIG,\n      ...config\n    };\n\n    validateMultiPersonInputConfig(config);\n\n    const outputStride = this.baseModel.outputStride;\n    const inputResolution = this.inputResolution;\n\n    const [height, width] = getInputTensorDimensions(input);\n\n    const {resized, padding} = padAndResizeTo(input, inputResolution);\n\n    const {heatmapScores, offsets, displacementFwd, displacementBwd} =\n        this.baseModel.predict(resized);\n\n    const allTensorBuffers = await toTensorBuffers3D(\n        [heatmapScores, offsets, displacementFwd, displacementBwd]);\n\n    const scoresBuffer = allTensorBuffers[0];\n    const offsetsBuffer = allTensorBuffers[1];\n    const displacementsFwdBuffer = allTensorBuffers[2];\n    const displacementsBwdBuffer = allTensorBuffers[3];\n\n    const poses = await decodeMultiplePoses(\n        scoresBuffer, offsetsBuffer, displacementsFwdBuffer,\n        displacementsBwdBuffer, outputStride, configWithDefaults.maxDetections,\n        configWithDefaults.scoreThreshold, configWithDefaults.nmsRadius);\n\n    const resultPoses = scaleAndFlipPoses(\n        poses, [height, width], inputResolution, padding,\n        configWithDefaults.flipHorizontal);\n\n    heatmapScores.dispose();\n    offsets.dispose();\n    displacementFwd.dispose();\n    displacementBwd.dispose();\n    resized.dispose();\n\n    return resultPoses;\n  }\n\n  /**\n   * Infer through PoseNet, and estimates a single pose using the outputs.\n   * This does standard ImageNet pre-processing before inferring through the\n   * model. The image should pixels should have values [0-255]. It detects\n   * multiple poses and finds their parts from part scores and displacement\n   * vectors using a fast greedy decoding algorithm.  It returns a single pose\n   *\n   * @param input\n   * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\n   * image to feed through the network.\n   *\n   * @param config SinglePersonEstimationConfig object that contains\n   * parameters for the PoseNet inference using single pose estimation.\n   *\n   * @return An pose and its scores, containing keypoints and\n   * the corresponding keypoint scores.  The positions of the keypoints are\n   * in the same scale as the original image\n   */\n  async estimateSinglePose(\n      input: PosenetInput,\n      config: SinglePersonInterfaceConfig = SINGLE_PERSON_INFERENCE_CONFIG):\n      Promise<Pose> {\n    const configWithDefaults = {...SINGLE_PERSON_INFERENCE_CONFIG, ...config};\n\n    validateSinglePersonInferenceConfig(configWithDefaults);\n\n    const outputStride = this.baseModel.outputStride;\n    const inputResolution = this.inputResolution;\n\n    const [height, width] = getInputTensorDimensions(input);\n\n    const {resized, padding} = padAndResizeTo(input, inputResolution);\n\n    const {heatmapScores, offsets, displacementFwd, displacementBwd} =\n        this.baseModel.predict(resized);\n\n    const pose = await decodeSinglePose(heatmapScores, offsets, outputStride);\n    const poses = [pose];\n\n    const resultPoses = scaleAndFlipPoses(\n        poses, [height, width], inputResolution, padding,\n        configWithDefaults.flipHorizontal);\n\n    heatmapScores.dispose();\n    offsets.dispose();\n    displacementFwd.dispose();\n    displacementBwd.dispose();\n    resized.dispose();\n\n    return resultPoses[0];\n  }\n\n  /** Deprecated: Use either estimateSinglePose or estimateMultiplePoses */\n  async estimatePoses(\n      input: PosenetInput,\n      config: LegacySinglePersonInferenceConfig|\n      LegacyMultiPersonInferenceConfig): Promise<Pose[]> {\n    if (config.decodingMethod === 'single-person') {\n      const pose = await this.estimateSinglePose(input, config);\n      return [pose];\n    } else {\n      return this.estimateMultiplePoses(input, config);\n    }\n  }\n\n  public dispose() {\n    this.baseModel.dispose();\n  }\n}\n\nasync function loadMobileNet(config: ModelConfig): Promise<PoseNet> {\n  const outputStride = config.outputStride;\n  const quantBytes = config.quantBytes;\n  const multiplier = config.multiplier;\n  if (tf == null) {\n    throw new Error(\n        `Cannot find TensorFlow.js. If you are using a <script> tag, please ` +\n        `also include @tensorflow/tfjs on the page before using this\n        model.`);\n  }\n\n  const url = mobileNetCheckpoint(outputStride, multiplier, quantBytes);\n  const graphModel = await tfconv.loadGraphModel(config.modelUrl || url);\n  const mobilenet = new MobileNet(graphModel, outputStride);\n\n  const validInputResolution = getValidInputResolutionDimensions(\n      config.inputResolution, mobilenet.outputStride);\n\n  return new PoseNet(mobilenet, validInputResolution);\n}\n\nasync function loadResNet(config: ModelConfig): Promise<PoseNet> {\n  const outputStride = config.outputStride;\n  const quantBytes = config.quantBytes;\n  if (tf == null) {\n    throw new Error(\n        `Cannot find TensorFlow.js. If you are using a <script> tag, please ` +\n        `also include @tensorflow/tfjs on the page before using this\n        model.`);\n  }\n\n  const url = resNet50Checkpoint(outputStride, quantBytes);\n  const graphModel = await tfconv.loadGraphModel(config.modelUrl || url);\n  const resnet = new ResNet(graphModel, outputStride);\n  const validInputResolution = getValidInputResolutionDimensions(\n      config.inputResolution, resnet.outputStride);\n  return new PoseNet(resnet, validInputResolution);\n}\n\n/**\n * Loads the PoseNet model instance from a checkpoint, with the ResNet\n * or MobileNet architecture. The model to be loaded is configurable using the\n * config dictionary ModelConfig. Please find more details in the\n * documentation of the ModelConfig.\n *\n * @param config ModelConfig dictionary that contains parameters for\n * the PoseNet loading process. Please find more details of each parameters\n * in the documentation of the ModelConfig interface. The predefined\n * `MOBILENET_V1_CONFIG` and `RESNET_CONFIG` can also be used as references\n * for defining your customized config.\n */\nexport async function load(config: ModelConfig = MOBILENET_V1_CONFIG):\n    Promise<PoseNet> {\n  config = validateModelConfig(config);\n  if (config.architecture === 'ResNet50') {\n    return loadResNet(config);\n  } else if (config.architecture === 'MobileNetV1') {\n    return loadMobileNet(config);\n  } else {\n    return null;\n  }\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.2.2';\nexport {version};\n"],"names":["model","outputStride","this","inputShape","inputs","shape","tf.util","assert","BaseModel","input","tf.tidy","asFloat","_this","preprocessInput","tf.cast","asBatch","tf.expandDims","results3d","predict","map","y","tf.squeeze","namedResults","nameOutputResults","heatmapScores","tf.sigmoid","heatmap","offsets","displacementFwd","displacementBwd","dispose","tslib_1.__extends","MobileNet","tf.sub","tf.div","results","half","k","Math","floor","maxSize","getElementValue","priorityQueue","Array","numberOfElements","MaxHeap","x","swim","max","exchange","sink","slice","less","j","i","getValueAt","t","scoreIsMaximumInLocalWindow","keypointId","score","heatmapY","heatmapX","localMaximumRadius","scores","_a","height","width","localMaximum","yStart","yEnd","min","yCurrent","xStart","xEnd","xCurrent","get","buildPartWithScoreQueue","scoreThreshold","numKeypoints","queue","enqueue","part","id","partNames","NUM_KEYPOINTS","length","partIds","reduce","result","jointName","connectedPartNames","poseChain","connectedPartIndices","jointNameA","jointNameB","partChannels","getOffsetPoint","keypoint","getImageCoords","clamp","a","squaredDistance","y1","x1","y2","x2","dy","dx","addVectors","b","parentChildrenTuples","parentJoinName","childJoinName","parentToChildEdges","childToParentEdges","getDisplacement","edgeId","point","displacements","numEdges","getStridedIndexNearPoint","round","traverseToTargetKeypoint","sourceKeypoint","targetKeypointId","scoresBuffer","offsetRefineStep","displacement","position","targetKeypoint","targetKeypointIndices","offsetPoint","targetKeyPointIndices","decodePose","root","displacementsFwd","displacementsBwd","numParts","instanceKeypoints","rootPart","rootScore","rootPoint","edge","sourceKeypointId","withinNmsRadiusOfCorrespondingPoint","poses","squaredNmsRadius","some","correspondingKeypoint","getInstanceScore","existingPoses","kLocalMaximumRadius","decodeMultiplePoses","offsetsBuffer","displacementsFwdBuffer","displacementsBwdBuffer","maxPoseDetections","nmsRadius","empty","dequeue","keypoints","push","mod","floored","tf.scalar","tf.mul","argmax2d","depth","reshaped","tf.reshape","coords","tf.argMax","yCoords","xCoords","tf.concat","getPointsConfidence","heatMapCoords","Float32Array","getOffsetVectors","heatMapCoordsBuffer","valueOf","tf.tensor2d","getOffsetPoints","offsetVectors","tf\r\n            .add","tf\r\n            .cast","tf\r\n            .mul","toTensor","decodeSinglePose","totalScore","heatmapValues","Promise","all","buffer","allTensorBuffers","heatmapValuesBuffer","offsetPoints","offsetPointsBuffer","keypointConfidence","from","MOBILENET_BASE_URL","RESNET50_BASE_URL","resNet50Checkpoint","stride","quantBytes","graphJson","mobileNetCheckpoint","multiplier","toStr","1","0.75","0.5","imageNetMean","ResNet","tf.add","eitherPointDoesntMeetConfidence","minConfidence","getAdjacentKeyPoints","leftJoint","rightJoint","NEGATIVE_INFINITY","POSITIVE_INFINITY","getBoundingBox","_b","maxX","maxY","minX","minY","_c","getBoundingBoxPoints","toTensorBuffers3D","tensors","tensor","scalePose","pose","scaleY","scaleX","offsetY","offsetX","scalePoses","flipPoseHorizontal","imageWidth","flipPosesHorizontal","toValidInputResolution","inputResolution","isValidInputResolution","validateInputResolution","getValidInputResolutionDimensions","VALID_OUTPUT_STRIDES","assertValidOutputStride","indexOf","resolution","assertValidResolution","getInputTensorDimensions","tf.Tensor","toInputTensor","tf.browser","fromPixels","padAndResizeTo","targetH","targetW","targetAspect","padT","padB","padL","padR","resized","imageTensor","tf.pad3d","tf.image","resizeBilinear","padding","top","left","right","bottom","scaleAndFlipPoses","flipHorizontal","inputResolutionHeight","inputResolutionWidth","scaledPoses","MOBILENET_V1_CONFIG","architecture","VALID_ARCHITECTURE","VALID_STRIDE","MobileNetV1","ResNet50","VALID_MULTIPLIER","VALID_QUANT_BYTES","validateModelConfig","config","Error","SINGLE_PERSON_INFERENCE_CONFIG","MULTI_PERSON_INFERENCE_CONFIG","maxDetections","validateMultiPersonInputConfig","net","baseModel","PoseNet","configWithDefaults","_d","resultPoses","decodingMethod","estimateSinglePose","estimateMultiplePoses","loadMobileNet","tf","url","tfconv.loadGraphModel","modelUrl","graphModel","mobilenet","validInputResolution","loadResNet","resnet","load","version"],"mappings":"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"}