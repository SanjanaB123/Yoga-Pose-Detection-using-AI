{"version":3,"file":"posenet.js","sources":["../src/base_model.ts","../src/mobilenet.ts","../src/multi_pose/max_heap.ts","../src/multi_pose/build_part_with_score_queue.ts","../src/keypoints.ts","../src/multi_pose/util.ts","../src/multi_pose/decode_pose.ts","../src/multi_pose/decode_multiple_poses.ts","../src/single_pose/argmax2d.ts","../src/single_pose/util.ts","../src/single_pose/decode_single_pose.ts","../src/checkpoints.ts","../src/resnet.ts","../src/util.ts","../src/posenet_model.ts","../src/version.ts","../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfconv from '@tensorflow/tfjs-converter';\nimport * as tf from '@tensorflow/tfjs-core';\nimport {PoseNetOutputStride} from './types';\n\n/**\n * PoseNet supports using various convolution neural network models\n * (e.g. ResNet and MobileNetV1) as its underlying base model.\n * The following BaseModel interface defines a unified interface for\n * creating such PoseNet base models. Currently both MobileNet (in\n * ./mobilenet.ts) and ResNet (in ./resnet.ts) implements the BaseModel\n * interface. New base models that conform to the BaseModel interface can be\n * added to PoseNet.\n */\nexport abstract class BaseModel {\n  constructor(\n      protected readonly model: tfconv.GraphModel,\n      public readonly outputStride: PoseNetOutputStride) {\n    const inputShape =\n        this.model.inputs[0].shape as [number, number, number, number];\n    tf.util.assert(\n        (inputShape[1] === -1) && (inputShape[2] === -1),\n        () => `Input shape [${inputShape[1]}, ${inputShape[2]}] ` +\n            `must both be equal to or -1`);\n  }\n\n  abstract preprocessInput(input: tf.Tensor3D): tf.Tensor3D;\n\n  /**\n   * Predicts intermediate Tensor representations.\n   *\n   * @param input The input RGB image of the base model.\n   * A Tensor of shape: [`inputResolution`, `inputResolution`, 3].\n   *\n   * @return A dictionary of base model's intermediate predictions.\n   * The returned dictionary should contains the following elements:\n   * heatmapScores: A Tensor3D that represents the heatmapScores.\n   * offsets: A Tensor3D that represents the offsets.\n   * displacementFwd: A Tensor3D that represents the forward displacement.\n   * displacementBwd: A Tensor3D that represents the backward displacement.\n   */\n  predict(input: tf.Tensor3D): {\n    heatmapScores: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D\n  } {\n    return tf.tidy(() => {\n      const asFloat = this.preprocessInput(tf.cast(input, 'float32'));\n      const asBatch = tf.expandDims(asFloat, 0);\n      const results = this.model.predict(asBatch) as tf.Tensor4D[];\n      const results3d: tf.Tensor3D[] = results.map(y => tf.squeeze(y, [0]));\n\n      const namedResults = this.nameOutputResults(results3d);\n\n      return {\n        heatmapScores: tf.sigmoid(namedResults.heatmap),\n        offsets: namedResults.offsets,\n        displacementFwd: namedResults.displacementFwd,\n        displacementBwd: namedResults.displacementBwd\n      };\n    });\n  }\n\n  // Because MobileNet and ResNet predict() methods output a different order for\n  // these values, we have a method that needs to be implemented to order them.\n  abstract nameOutputResults(results: tf.Tensor3D[]): {\n    heatmap: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D\n  };\n\n  /**\n   * Releases the CPU and GPU memory allocated by the model.\n   */\n  dispose() {\n    this.model.dispose();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BaseModel} from './base_model';\n\nexport class MobileNet extends BaseModel {\n  preprocessInput(input: tf.Tensor3D): tf.Tensor3D {\n    // Normalize the pixels [0, 255] to be between [-1, 1].\n    return tf.tidy(() => tf.sub(tf.div(input, 127.5), 1.0));\n  }\n\n  nameOutputResults(results: tf.Tensor3D[]) {\n    const [offsets, heatmap, displacementFwd, displacementBwd] = results;\n    return {offsets, heatmap, displacementFwd, displacementBwd};\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// algorithm based on Coursera Lecture from Algorithms, Part 1:\n// https://www.coursera.org/learn/algorithms-part1/lecture/ZjoSM/heapsort\n\nfunction half(k: number) {\n  return Math.floor(k / 2);\n}\n\nexport class MaxHeap<T> {\n  private priorityQueue: T[];\n  private numberOfElements: number;\n  private getElementValue: (element: T) => number;\n\n  constructor(maxSize: number, getElementValue: (element: T) => number) {\n    this.priorityQueue = new Array(maxSize);\n    this.numberOfElements = -1;\n    this.getElementValue = getElementValue;\n  }\n\n  public enqueue(x: T): void {\n    this.priorityQueue[++this.numberOfElements] = x;\n    this.swim(this.numberOfElements);\n  }\n\n  public dequeue(): T {\n    const max = this.priorityQueue[0];\n    this.exchange(0, this.numberOfElements--);\n    this.sink(0);\n    this.priorityQueue[this.numberOfElements + 1] = null;\n    return max;\n  }\n\n  public empty(): boolean {\n    return this.numberOfElements === -1;\n  }\n\n  public size(): number {\n    return this.numberOfElements + 1;\n  }\n\n  public all(): T[] {\n    return this.priorityQueue.slice(0, this.numberOfElements + 1);\n  }\n\n  public max(): T {\n    return this.priorityQueue[0];\n  }\n\n  private swim(k: number): void {\n    while (k > 0 && this.less(half(k), k)) {\n      this.exchange(k, half(k));\n      k = half(k);\n    }\n  }\n\n  private sink(k: number): void {\n    while (2 * k <= this.numberOfElements) {\n      let j = 2 * k;\n      if (j < this.numberOfElements && this.less(j, j + 1)) {\n        j++;\n      }\n      if (!this.less(k, j)) {\n        break;\n      }\n      this.exchange(k, j);\n      k = j;\n    }\n  }\n\n  private getValueAt(i: number): number {\n    return this.getElementValue(this.priorityQueue[i]);\n  }\n\n  private less(i: number, j: number): boolean {\n    return this.getValueAt(i) < this.getValueAt(j);\n  }\n\n  private exchange(i: number, j: number): void {\n    const t = this.priorityQueue[i];\n    this.priorityQueue[i] = this.priorityQueue[j];\n    this.priorityQueue[j] = t;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PartWithScore, TensorBuffer3D} from '../types';\n\nimport {MaxHeap} from './max_heap';\n\nfunction scoreIsMaximumInLocalWindow(\n    keypointId: number, score: number, heatmapY: number, heatmapX: number,\n    localMaximumRadius: number, scores: TensorBuffer3D): boolean {\n  const [height, width] = scores.shape;\n\n  let localMaximum = true;\n  const yStart = Math.max(heatmapY - localMaximumRadius, 0);\n  const yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);\n  for (let yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {\n    const xStart = Math.max(heatmapX - localMaximumRadius, 0);\n    const xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);\n    for (let xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {\n      if (scores.get(yCurrent, xCurrent, keypointId) > score) {\n        localMaximum = false;\n        break;\n      }\n    }\n    if (!localMaximum) {\n      break;\n    }\n  }\n\n  return localMaximum;\n}\n\n/**\n * Builds a priority queue with part candidate positions for a specific image in\n * the batch. For this we find all local maxima in the score maps with score\n * values above a threshold. We create a single priority queue across all parts.\n */\nexport function buildPartWithScoreQueue(\n    scoreThreshold: number, localMaximumRadius: number,\n    scores: TensorBuffer3D): MaxHeap<PartWithScore> {\n  const [height, width, numKeypoints] = scores.shape;\n\n  const queue = new MaxHeap<PartWithScore>(\n      height * width * numKeypoints, ({score}) => score);\n\n  for (let heatmapY = 0; heatmapY < height; ++heatmapY) {\n    for (let heatmapX = 0; heatmapX < width; ++heatmapX) {\n      for (let keypointId = 0; keypointId < numKeypoints; ++keypointId) {\n        const score = scores.get(heatmapY, heatmapX, keypointId);\n\n        // Only consider parts with score greater or equal to threshold as\n        // root candidates.\n        if (score < scoreThreshold) {\n          continue;\n        }\n\n        // Only consider keypoints whose score is maximum in a local window.\n        if (scoreIsMaximumInLocalWindow(\n                keypointId, score, heatmapY, heatmapX, localMaximumRadius,\n                scores)) {\n          queue.enqueue({score, part: {heatmapY, heatmapX, id: keypointId}});\n        }\n      }\n    }\n  }\n\n  return queue;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport type Tuple<T> = [T, T];\nexport type StringTuple = Tuple<string>;\nexport type NumberTuple = Tuple<number>;\n\nexport const partNames = [\n  'nose', 'leftEye', 'rightEye', 'leftEar', 'rightEar', 'leftShoulder',\n  'rightShoulder', 'leftElbow', 'rightElbow', 'leftWrist', 'rightWrist',\n  'leftHip', 'rightHip', 'leftKnee', 'rightKnee', 'leftAnkle', 'rightAnkle'\n];\n\nexport const NUM_KEYPOINTS = partNames.length;\n\nexport interface NumberDict {\n  [jointName: string]: number;\n}\n\nexport const partIds =\n    partNames.reduce((result: NumberDict, jointName, i): NumberDict => {\n      result[jointName] = i;\n      return result;\n    }, {}) as NumberDict;\n\nconst connectedPartNames: StringTuple[] = [\n  ['leftHip', 'leftShoulder'], ['leftElbow', 'leftShoulder'],\n  ['leftElbow', 'leftWrist'], ['leftHip', 'leftKnee'],\n  ['leftKnee', 'leftAnkle'], ['rightHip', 'rightShoulder'],\n  ['rightElbow', 'rightShoulder'], ['rightElbow', 'rightWrist'],\n  ['rightHip', 'rightKnee'], ['rightKnee', 'rightAnkle'],\n  ['leftShoulder', 'rightShoulder'], ['leftHip', 'rightHip']\n];\n\n/*\n * Define the skeleton. This defines the parent->child relationships of our\n * tree. Arbitrarily this defines the nose as the root of the tree, however\n * since we will infer the displacement for both parent->child and\n * child->parent, we can define the tree root as any node.\n */\nexport const poseChain: StringTuple[] = [\n  ['nose', 'leftEye'], ['leftEye', 'leftEar'], ['nose', 'rightEye'],\n  ['rightEye', 'rightEar'], ['nose', 'leftShoulder'],\n  ['leftShoulder', 'leftElbow'], ['leftElbow', 'leftWrist'],\n  ['leftShoulder', 'leftHip'], ['leftHip', 'leftKnee'],\n  ['leftKnee', 'leftAnkle'], ['nose', 'rightShoulder'],\n  ['rightShoulder', 'rightElbow'], ['rightElbow', 'rightWrist'],\n  ['rightShoulder', 'rightHip'], ['rightHip', 'rightKnee'],\n  ['rightKnee', 'rightAnkle']\n];\n\nexport const connectedPartIndices = connectedPartNames.map(\n    ([jointNameA, jointNameB]) => ([partIds[jointNameA], partIds[jointNameB]]));\n\nexport const partChannels: string[] = [\n  'left_face',\n  'right_face',\n  'right_upper_leg_front',\n  'right_lower_leg_back',\n  'right_upper_leg_back',\n  'left_lower_leg_front',\n  'left_upper_leg_front',\n  'left_upper_leg_back',\n  'left_lower_leg_back',\n  'right_feet',\n  'right_lower_leg_front',\n  'left_feet',\n  'torso_front',\n  'torso_back',\n  'right_upper_arm_front',\n  'right_upper_arm_back',\n  'right_lower_arm_back',\n  'left_lower_arm_front',\n  'left_upper_arm_front',\n  'left_upper_arm_back',\n  'left_lower_arm_back',\n  'right_hand',\n  'right_lower_arm_front',\n  'left_hand'\n];\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NUM_KEYPOINTS} from '../keypoints';\nimport {Part, TensorBuffer3D, Vector2D} from '../types';\n\nexport function getOffsetPoint(\n    y: number, x: number, keypoint: number, offsets: TensorBuffer3D): Vector2D {\n  return {\n    y: offsets.get(y, x, keypoint),\n    x: offsets.get(y, x, keypoint + NUM_KEYPOINTS)\n  };\n}\n\nexport function getImageCoords(\n    part: Part, outputStride: number, offsets: TensorBuffer3D): Vector2D {\n  const {heatmapY, heatmapX, id: keypoint} = part;\n  const {y, x} = getOffsetPoint(heatmapY, heatmapX, keypoint, offsets);\n  return {\n    x: part.heatmapX * outputStride + x,\n    y: part.heatmapY * outputStride + y\n  };\n}\n\nexport function fillArray<T>(element: T, size: number): T[] {\n  const result: T[] = new Array(size);\n\n  for (let i = 0; i < size; i++) {\n    result[i] = element;\n  }\n\n  return result;\n}\n\nexport function clamp(a: number, min: number, max: number): number {\n  if (a < min) {\n    return min;\n  }\n  if (a > max) {\n    return max;\n  }\n  return a;\n}\n\nexport function squaredDistance(\n    y1: number, x1: number, y2: number, x2: number): number {\n  const dy = y2 - y1;\n  const dx = x2 - x1;\n  return dy * dy + dx * dx;\n}\n\nexport function addVectors(a: Vector2D, b: Vector2D): Vector2D {\n  return {x: a.x + b.x, y: a.y + b.y};\n}\n\nexport function clampVector(a: Vector2D, min: number, max: number): Vector2D {\n  return {y: clamp(a.y, min, max), x: clamp(a.x, min, max)};\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumberTuple, partIds, partNames, poseChain} from '../keypoints';\nimport {Keypoint, PartWithScore, TensorBuffer3D, Vector2D} from '../types';\n\nimport {clamp, getOffsetPoint} from './util';\nimport {addVectors, getImageCoords} from './util';\n\nconst parentChildrenTuples: NumberTuple[] = poseChain.map(\n    ([parentJoinName, childJoinName]): NumberTuple =>\n        ([partIds[parentJoinName], partIds[childJoinName]]));\n\nconst parentToChildEdges: number[] =\n    parentChildrenTuples.map(([, childJointId]) => childJointId);\n\nconst childToParentEdges: number[] =\n    parentChildrenTuples.map(([\n                               parentJointId,\n                             ]) => parentJointId);\n\nfunction getDisplacement(\n    edgeId: number, point: Vector2D, displacements: TensorBuffer3D): Vector2D {\n  const numEdges = displacements.shape[2] / 2;\n  return {\n    y: displacements.get(point.y, point.x, edgeId),\n    x: displacements.get(point.y, point.x, numEdges + edgeId)\n  };\n}\n\nfunction getStridedIndexNearPoint(\n    point: Vector2D, outputStride: number, height: number,\n    width: number): Vector2D {\n  return {\n    y: clamp(Math.round(point.y / outputStride), 0, height - 1),\n    x: clamp(Math.round(point.x / outputStride), 0, width - 1)\n  };\n}\n\n/**\n * We get a new keypoint along the `edgeId` for the pose instance, assuming\n * that the position of the `idSource` part is already known. For this, we\n * follow the displacement vector from the source to target part (stored in\n * the `i`-t channel of the displacement tensor). The displaced keypoint\n * vector is refined using the offset vector by `offsetRefineStep` times.\n */\nfunction traverseToTargetKeypoint(\n    edgeId: number, sourceKeypoint: Keypoint, targetKeypointId: number,\n    scoresBuffer: TensorBuffer3D, offsets: TensorBuffer3D, outputStride: number,\n    displacements: TensorBuffer3D, offsetRefineStep = 2): Keypoint {\n  const [height, width] = scoresBuffer.shape;\n\n  // Nearest neighbor interpolation for the source->target displacements.\n  const sourceKeypointIndices = getStridedIndexNearPoint(\n      sourceKeypoint.position, outputStride, height, width);\n\n  const displacement =\n      getDisplacement(edgeId, sourceKeypointIndices, displacements);\n\n  const displacedPoint = addVectors(sourceKeypoint.position, displacement);\n  let targetKeypoint = displacedPoint;\n  for (let i = 0; i < offsetRefineStep; i++) {\n    const targetKeypointIndices =\n        getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\n\n    const offsetPoint = getOffsetPoint(\n        targetKeypointIndices.y, targetKeypointIndices.x, targetKeypointId,\n        offsets);\n\n    targetKeypoint = addVectors(\n        {\n          x: targetKeypointIndices.x * outputStride,\n          y: targetKeypointIndices.y * outputStride\n        },\n        {x: offsetPoint.x, y: offsetPoint.y});\n  }\n  const targetKeyPointIndices =\n      getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\n  const score = scoresBuffer.get(\n      targetKeyPointIndices.y, targetKeyPointIndices.x, targetKeypointId);\n\n  return {position: targetKeypoint, part: partNames[targetKeypointId], score};\n}\n\n/**\n * Follows the displacement fields to decode the full pose of the object\n * instance given the position of a part that acts as root.\n *\n * @return An array of decoded keypoints and their scores for a single pose\n */\nexport function decodePose(\n    root: PartWithScore, scores: TensorBuffer3D, offsets: TensorBuffer3D,\n    outputStride: number, displacementsFwd: TensorBuffer3D,\n    displacementsBwd: TensorBuffer3D): Keypoint[] {\n  const numParts = scores.shape[2];\n  const numEdges = parentToChildEdges.length;\n\n  const instanceKeypoints: Keypoint[] = new Array(numParts);\n  // Start a new detection instance at the position of the root.\n  const {part: rootPart, score: rootScore} = root;\n  const rootPoint = getImageCoords(rootPart, outputStride, offsets);\n\n  instanceKeypoints[rootPart.id] = {\n    score: rootScore,\n    part: partNames[rootPart.id],\n    position: rootPoint\n  };\n\n  // Decode the part positions upwards in the tree, following the backward\n  // displacements.\n  for (let edge = numEdges - 1; edge >= 0; --edge) {\n    const sourceKeypointId = parentToChildEdges[edge];\n    const targetKeypointId = childToParentEdges[edge];\n    if (instanceKeypoints[sourceKeypointId] &&\n        !instanceKeypoints[targetKeypointId]) {\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(\n          edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores,\n          offsets, outputStride, displacementsBwd);\n    }\n  }\n\n  // Decode the part positions downwards in the tree, following the forward\n  // displacements.\n  for (let edge = 0; edge < numEdges; ++edge) {\n    const sourceKeypointId = childToParentEdges[edge];\n    const targetKeypointId = parentToChildEdges[edge];\n    if (instanceKeypoints[sourceKeypointId] &&\n        !instanceKeypoints[targetKeypointId]) {\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(\n          edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores,\n          offsets, outputStride, displacementsFwd);\n    }\n  }\n\n  return instanceKeypoints;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Keypoint, Pose, TensorBuffer3D} from '../types';\n\nimport {buildPartWithScoreQueue} from './build_part_with_score_queue';\nimport {decodePose} from './decode_pose';\nimport {getImageCoords, squaredDistance} from './util';\n\nfunction withinNmsRadiusOfCorrespondingPoint(\n    poses: Pose[], squaredNmsRadius: number, {x, y}: {x: number, y: number},\n    keypointId: number): boolean {\n  return poses.some(({keypoints}) => {\n    const correspondingKeypoint = keypoints[keypointId].position;\n    return squaredDistance(\n               y, x, correspondingKeypoint.y, correspondingKeypoint.x) <=\n        squaredNmsRadius;\n  });\n}\n\n/* Score the newly proposed object instance without taking into account\n * the scores of the parts that overlap with any previously detected\n * instance.\n */\nfunction getInstanceScore(\n    existingPoses: Pose[], squaredNmsRadius: number,\n    instanceKeypoints: Keypoint[]): number {\n  let notOverlappedKeypointScores = instanceKeypoints.reduce(\n      (result, {position, score}, keypointId): number => {\n        if (!withinNmsRadiusOfCorrespondingPoint(\n                existingPoses, squaredNmsRadius, position, keypointId)) {\n          result += score;\n        }\n        return result;\n      }, 0.0);\n\n  return notOverlappedKeypointScores /= instanceKeypoints.length;\n}\n\n// A point (y, x) is considered as root part candidate if its score is a\n// maximum in a window |y - y'| <= kLocalMaximumRadius, |x - x'| <=\n// kLocalMaximumRadius.\nconst kLocalMaximumRadius = 1;\n\n/**\n * Detects multiple poses and finds their parts from part scores and\n * displacement vectors. It returns up to `maxDetections` object instance\n * detections in decreasing root score order. It works as follows: We first\n * create a priority queue with local part score maxima above\n * `scoreThreshold`, considering all parts at the same time. Then we\n * iteratively pull the top  element of the queue (in decreasing score order)\n * and treat it as a root candidate for a new object instance. To avoid\n * duplicate detections, we reject the root candidate if it is within a disk\n * of `nmsRadius` pixels from the corresponding part of a previously detected\n * instance, which is a form of part-based non-maximum suppression (NMS). If\n * the root candidate passes the NMS check, we start a new object instance\n * detection, treating the corresponding part as root and finding the\n * positions of the remaining parts by following the displacement vectors\n * along the tree-structured part graph. We assign to the newly detected\n * instance a score equal to the sum of scores of its parts which have not\n * been claimed by a previous instance (i.e., those at least `nmsRadius`\n * pixels away from the corresponding part of all previously detected\n * instances), divided by the total number of parts `numParts`.\n *\n * @param heatmapScores 3-D tensor with shape `[height, width, numParts]`.\n * The value of heatmapScores[y, x, k]` is the score of placing the `k`-th\n * object part at position `(y, x)`.\n *\n * @param offsets 3-D tensor with shape `[height, width, numParts * 2]`.\n * The value of [offsets[y, x, k], offsets[y, x, k + numParts]]` is the\n * short range offset vector of the `k`-th  object part at heatmap\n * position `(y, x)`.\n *\n * @param displacementsFwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the forward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param displacementsBwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the backward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param outputStride The output stride that was used when feed-forwarding\n * through the PoseNet model.  Must be 32, 16, or 8.\n *\n * @param maxPoseDetections Maximum number of returned instance detections per\n * image.\n *\n * @param scoreThreshold Only return instance detections that have root part\n * score greater or equal to this value. Defaults to 0.5.\n *\n * @param nmsRadius Non-maximum suppression part distance. It needs to be\n * strictly positive. Two parts suppress each other if they are less than\n * `nmsRadius` pixels away. Defaults to 20.\n *\n * @return An array of poses and their scores, each containing keypoints and\n * the corresponding keypoint scores.\n */\nexport function decodeMultiplePoses(\n    scoresBuffer: TensorBuffer3D, offsetsBuffer: TensorBuffer3D,\n    displacementsFwdBuffer: TensorBuffer3D,\n    displacementsBwdBuffer: TensorBuffer3D, outputStride: number,\n    maxPoseDetections: number, scoreThreshold = 0.5, nmsRadius = 20): Pose[] {\n  const poses: Pose[] = [];\n\n  const queue = buildPartWithScoreQueue(\n      scoreThreshold, kLocalMaximumRadius, scoresBuffer);\n\n  const squaredNmsRadius = nmsRadius * nmsRadius;\n\n  // Generate at most maxDetections object instances per image in\n  // decreasing root part score order.\n  while (poses.length < maxPoseDetections && !queue.empty()) {\n    // The top element in the queue is the next root candidate.\n    const root = queue.dequeue();\n\n    // Part-based non-maximum suppression: We reject a root candidate if it\n    // is within a disk of `nmsRadius` pixels from the corresponding part of\n    // a previously detected instance.\n    const rootImageCoords =\n        getImageCoords(root.part, outputStride, offsetsBuffer);\n    if (withinNmsRadiusOfCorrespondingPoint(\n            poses, squaredNmsRadius, rootImageCoords, root.part.id)) {\n      continue;\n    }\n\n    // Start a new detection instance at the position of the root.\n    const keypoints = decodePose(\n        root, scoresBuffer, offsetsBuffer, outputStride, displacementsFwdBuffer,\n        displacementsBwdBuffer);\n\n    const score = getInstanceScore(poses, squaredNmsRadius, keypoints);\n\n    poses.push({keypoints, score});\n  }\n\n  return poses;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nfunction mod(a: tf.Tensor1D, b: number): tf.Tensor1D {\n  return tf.tidy(() => {\n    const floored = tf.div(a, tf.scalar(b, 'int32'));\n\n    return tf.sub(a, tf.mul(floored, tf.scalar(b, 'int32')));\n  });\n}\n\nexport function argmax2d(inputs: tf.Tensor3D): tf.Tensor2D {\n  const [height, width, depth] = inputs.shape;\n\n  return tf.tidy(() => {\n    const reshaped = tf.reshape(inputs, [height * width, depth]);\n    const coords = tf.argMax(reshaped, 0);\n\n    const yCoords = tf.expandDims(tf.div(coords, tf.scalar(width, 'int32')), 1);\n    const xCoords = tf.expandDims(mod(coords as tf.Tensor1D, width), 1);\n\n    return tf.concat([yCoords, xCoords], 1);\n  }) as tf.Tensor2D;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {NUM_KEYPOINTS} from '../keypoints';\nimport {Vector2D} from '../types';\n\nexport function getPointsConfidence(\n    heatmapScores: tf.TensorBuffer<tf.Rank.R3>,\n    heatMapCoords: tf.TensorBuffer<tf.Rank.R2>): Float32Array {\n  const numKeypoints = heatMapCoords.shape[0];\n  const result = new Float32Array(numKeypoints);\n\n  for (let keypoint = 0; keypoint < numKeypoints; keypoint++) {\n    const y = heatMapCoords.get(keypoint, 0);\n    const x = heatMapCoords.get(keypoint, 1);\n    result[keypoint] = heatmapScores.get(y, x, keypoint);\n  }\n\n  return result;\n}\n\nfunction getOffsetPoint(\n    y: number, x: number, keypoint: number,\n    offsetsBuffer: tf.TensorBuffer<tf.Rank.R3>): Vector2D {\n  return {\n    y: offsetsBuffer.get(y, x, keypoint),\n    x: offsetsBuffer.get(y, x, keypoint + NUM_KEYPOINTS)\n  };\n}\n\nexport function getOffsetVectors(\n    heatMapCoordsBuffer: tf.TensorBuffer<tf.Rank.R2>,\n    offsetsBuffer: tf.TensorBuffer<tf.Rank.R3>): tf.Tensor2D {\n  const result: number[] = [];\n\n  for (let keypoint = 0; keypoint < NUM_KEYPOINTS; keypoint++) {\n    const heatmapY = heatMapCoordsBuffer.get(keypoint, 0).valueOf();\n    const heatmapX = heatMapCoordsBuffer.get(keypoint, 1).valueOf();\n\n    const {x, y} = getOffsetPoint(heatmapY, heatmapX, keypoint, offsetsBuffer);\n\n    result.push(y);\n    result.push(x);\n  }\n\n  return tf.tensor2d(result, [NUM_KEYPOINTS, 2]);\n}\n\nexport function getOffsetPoints(\n    heatMapCoordsBuffer: tf.TensorBuffer<tf.Rank.R2>, outputStride: number,\n    offsetsBuffer: tf.TensorBuffer<tf.Rank.R3>): tf.Tensor2D {\n  return tf.tidy(() => {\n    const offsetVectors = getOffsetVectors(heatMapCoordsBuffer, offsetsBuffer);\n\n    return tf\n        .add(tf\n          .cast(tf\n            .mul(heatMapCoordsBuffer.toTensor(), tf.scalar(outputStride,\n              'int32')), 'float32'), offsetVectors);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {partNames} from '../keypoints';\nimport {Keypoint, Pose, PoseNetOutputStride} from '../types';\n\nimport {argmax2d} from './argmax2d';\nimport {getOffsetPoints, getPointsConfidence} from './util';\n\n/**\n * Detects a single pose and finds its parts from part scores and offset\n * vectors. It returns a single pose detection. It works as follows:\n * argmax2d is done on the scores to get the y and x index in the heatmap\n * with the highest score for each part, which is essentially where the\n * part is most likely to exist. This produces a tensor of size 17x2, with\n * each row being the y and x index in the heatmap for each keypoint.\n * The offset vector for each for each part is retrieved by getting the\n * y and x from the offsets corresponding to the y and x index in the\n * heatmap for that part. This produces a tensor of size 17x2, with each\n * row being the offset vector for the corresponding keypoint.\n * To get the keypoint, each part’s heatmap y and x are multiplied\n * by the output stride then added to their corresponding offset vector,\n * which is in the same scale as the original image.\n *\n * @param heatmapScores 3-D tensor with shape `[height, width, numParts]`.\n * The value of heatmapScores[y, x, k]` is the score of placing the `k`-th\n * object part at position `(y, x)`.\n *\n * @param offsets 3-D tensor with shape `[height, width, numParts * 2]`.\n * The value of [offsets[y, x, k], offsets[y, x, k + numParts]]` is the\n * short range offset vector of the `k`-th  object part at heatmap\n * position `(y, x)`.\n *\n * @param outputStride The output stride that was used when feed-forwarding\n * through the PoseNet model.  Must be 32, 16, or 8.\n *\n * @return A promise that resolves with single pose with a confidence score,\n * which contains an array of keypoints indexed by part id, each with a score\n * and position.\n */\nexport async function decodeSinglePose(\n    heatmapScores: tf.Tensor3D, offsets: tf.Tensor3D,\n    outputStride: PoseNetOutputStride): Promise<Pose> {\n  let totalScore = 0.0;\n\n  const heatmapValues = argmax2d(heatmapScores);\n\n  const allTensorBuffers = await Promise.all(\n      [heatmapScores.buffer(), offsets.buffer(), heatmapValues.buffer()]);\n\n  const scoresBuffer = allTensorBuffers[0];\n  const offsetsBuffer = allTensorBuffers[1];\n  const heatmapValuesBuffer = allTensorBuffers[2];\n\n  const offsetPoints =\n      getOffsetPoints(heatmapValuesBuffer, outputStride, offsetsBuffer);\n  const offsetPointsBuffer = await offsetPoints.buffer();\n\n  const keypointConfidence =\n      Array.from(getPointsConfidence(scoresBuffer, heatmapValuesBuffer));\n\n  const keypoints = keypointConfidence.map((score, keypointId): Keypoint => {\n    totalScore += score;\n    return {\n      position: {\n        y: offsetPointsBuffer.get(keypointId, 0),\n        x: offsetPointsBuffer.get(keypointId, 1)\n      },\n      part: partNames[keypointId],\n      score\n    };\n  });\n\n  heatmapValues.dispose();\n  offsetPoints.dispose();\n\n  return {keypoints, score: totalScore / keypoints.length};\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst MOBILENET_BASE_URL =\n    'https://storage.googleapis.com/tfjs-models/savedmodel/posenet/mobilenet/';\nconst RESNET50_BASE_URL =\n    'https://storage.googleapis.com/tfjs-models/savedmodel/posenet/resnet50/';\n\n// The PoseNet 2.0 ResNet50 models use the latest TensorFlow.js 1.0 model\n// format.\nexport function resNet50Checkpoint(stride: number, quantBytes: number): string {\n  const graphJson = `model-stride${stride}.json`;\n  // quantBytes=4 corresponding to the non-quantized full-precision checkpoints.\n  if (quantBytes === 4) {\n    return RESNET50_BASE_URL + `float/` + graphJson;\n  } else {\n    return RESNET50_BASE_URL + `quant${quantBytes}/` + graphJson;\n  }\n}\n\n// The PoseNet 2.0 MobileNetV1 models use the latest TensorFlow.js 1.0 model\n// format.\nexport function mobileNetCheckpoint(\n    stride: number, multiplier: number, quantBytes: number): string {\n  const toStr: {[key: number]: string} = {1.0: '100', 0.75: '075', 0.50: '050'};\n  const graphJson = `model-stride${stride}.json`;\n  // quantBytes=4 corresponding to the non-quantized full-precision checkpoints.\n  if (quantBytes === 4) {\n    return MOBILENET_BASE_URL + `float/${toStr[multiplier]}/` + graphJson;\n  } else {\n    return MOBILENET_BASE_URL + `quant${quantBytes}/${toStr[multiplier]}/` +\n        graphJson;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {BaseModel} from './base_model';\n\nconst imageNetMean = [-123.15, -115.90, -103.06];\n\nexport class ResNet extends BaseModel {\n  preprocessInput(input: tf.Tensor3D): tf.Tensor3D {\n    return tf.add(input, imageNetMean);\n  }\n\n  nameOutputResults(results: tf.Tensor3D[]) {\n    const [displacementFwd, displacementBwd, offsets, heatmap] = results;\n    return {offsets, heatmap, displacementFwd, displacementBwd};\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {connectedPartIndices} from './keypoints';\nimport {InputResolution, Keypoint, Padding, Pose, PosenetInput, PoseNetOutputStride, TensorBuffer3D, Vector2D} from './types';\n\nfunction eitherPointDoesntMeetConfidence(\n    a: number, b: number, minConfidence: number): boolean {\n  return (a < minConfidence || b < minConfidence);\n}\n\nexport function getAdjacentKeyPoints(\n    keypoints: Keypoint[], minConfidence: number): Keypoint[][] {\n  return connectedPartIndices.reduce(\n      (result: Keypoint[][], [leftJoint, rightJoint]): Keypoint[][] => {\n        if (eitherPointDoesntMeetConfidence(\n                keypoints[leftJoint].score, keypoints[rightJoint].score,\n                minConfidence)) {\n          return result;\n        }\n\n        result.push([keypoints[leftJoint], keypoints[rightJoint]]);\n\n        return result;\n      }, []);\n}\n\nconst {NEGATIVE_INFINITY, POSITIVE_INFINITY} = Number;\nexport function getBoundingBox(keypoints: Keypoint[]):\n    {maxX: number, maxY: number, minX: number, minY: number} {\n  return keypoints.reduce(({maxX, maxY, minX, minY}, {position: {x, y}}) => {\n    return {\n      maxX: Math.max(maxX, x),\n      maxY: Math.max(maxY, y),\n      minX: Math.min(minX, x),\n      minY: Math.min(minY, y)\n    };\n  }, {\n    maxX: NEGATIVE_INFINITY,\n    maxY: NEGATIVE_INFINITY,\n    minX: POSITIVE_INFINITY,\n    minY: POSITIVE_INFINITY\n  });\n}\n\nexport function getBoundingBoxPoints(keypoints: Keypoint[]): Vector2D[] {\n  const {minX, minY, maxX, maxY} = getBoundingBox(keypoints);\n  return [\n    {x: minX, y: minY}, {x: maxX, y: minY}, {x: maxX, y: maxY},\n    {x: minX, y: maxY}\n  ];\n}\n\nexport async function toTensorBuffers3D(tensors: tf.Tensor3D[]):\n    Promise<TensorBuffer3D[]> {\n  return Promise.all(tensors.map(tensor => tensor.buffer()));\n}\n\nexport function scalePose(\n    pose: Pose, scaleY: number, scaleX: number, offsetY = 0,\n    offsetX = 0): Pose {\n  return {\n    score: pose.score,\n    keypoints: pose.keypoints.map(({score, part, position}) => ({\n                                    score,\n                                    part,\n                                    position: {\n                                      x: position.x * scaleX + offsetX,\n                                      y: position.y * scaleY + offsetY\n                                    }\n                                  }))\n  };\n}\n\nexport function scalePoses(\n    poses: Pose[], scaleY: number, scaleX: number, offsetY = 0, offsetX = 0) {\n  if (scaleX === 1 && scaleY === 1 && offsetY === 0 && offsetX === 0) {\n    return poses;\n  }\n  return poses.map(pose => scalePose(pose, scaleY, scaleX, offsetY, offsetX));\n}\n\nexport function flipPoseHorizontal(pose: Pose, imageWidth: number): Pose {\n  return {\n    score: pose.score,\n    keypoints: pose.keypoints.map(\n        ({score, part, position}) => ({\n          score,\n          part,\n          position: {x: imageWidth - 1 - position.x, y: position.y}\n        }))\n  };\n}\n\nexport function flipPosesHorizontal(poses: Pose[], imageWidth: number) {\n  if (imageWidth <= 0) {\n    return poses;\n  }\n  return poses.map(pose => flipPoseHorizontal(pose, imageWidth));\n}\n\nexport function toValidInputResolution(\n    inputResolution: number, outputStride: PoseNetOutputStride): number {\n  if (isValidInputResolution(inputResolution, outputStride)) {\n    return inputResolution;\n  }\n\n  return Math.floor(inputResolution / outputStride) * outputStride + 1;\n}\n\nexport function validateInputResolution(inputResolution: InputResolution) {\n  tf.util.assert(\n      typeof inputResolution === 'number' ||\n          typeof inputResolution === 'object',\n      () => `Invalid inputResolution ${inputResolution}. ` +\n          `Should be a number or an object with width and height`);\n\n  if (typeof inputResolution === 'object') {\n    tf.util.assert(\n        typeof inputResolution.width === 'number',\n        () => `inputResolution.width has a value of ${\n            inputResolution.width} which is invalid; it must be a number`);\n    tf.util.assert(\n        typeof inputResolution.height === 'number',\n        () => `inputResolution.height has a value of ${\n            inputResolution.height} which is invalid; it must be a number`);\n  }\n}\n\nexport function getValidInputResolutionDimensions(\n    inputResolution: InputResolution,\n    outputStride: PoseNetOutputStride): [number, number] {\n  validateInputResolution(inputResolution);\n  if (typeof inputResolution === 'object') {\n    return [\n      toValidInputResolution(inputResolution.height, outputStride),\n      toValidInputResolution(inputResolution.width, outputStride),\n    ];\n  } else {\n    return [\n      toValidInputResolution(inputResolution, outputStride),\n      toValidInputResolution(inputResolution, outputStride),\n    ];\n  }\n}\n\nconst VALID_OUTPUT_STRIDES: PoseNetOutputStride[] = [8, 16, 32];\nexport function assertValidOutputStride(outputStride: PoseNetOutputStride) {\n  tf.util.assert(\n      typeof outputStride === 'number', () => 'outputStride is not a number');\n  tf.util.assert(\n      VALID_OUTPUT_STRIDES.indexOf(outputStride) >= 0,\n      () => `outputStride of ${outputStride} is invalid. ` +\n          `It must be either 8, 16, or 32`);\n}\n\nfunction isValidInputResolution(\n    resolution: number, outputStride: number): boolean {\n  return (resolution - 1) % outputStride === 0;\n}\n\nexport function assertValidResolution(\n    resolution: [number, number], outputStride: number) {\n  tf.util.assert(\n      typeof resolution[0] === 'number' && typeof resolution[1] === 'number',\n      () => `both resolution values must be a number but had values ${\n          resolution}`);\n\n  tf.util.assert(\n      isValidInputResolution(resolution[0], outputStride),\n      () => `height of ${resolution[0]} is invalid for output stride ` +\n          `${outputStride}.`);\n\n  tf.util.assert(\n      isValidInputResolution(resolution[1], outputStride),\n      () => `width of ${resolution[1]} is invalid for output stride ` +\n          `${outputStride}.`);\n}\n\nexport function getInputTensorDimensions(input: PosenetInput):\n    [number, number] {\n  return input instanceof tf.Tensor ? [input.shape[0], input.shape[1]] :\n                                      [input.height, input.width];\n}\n\nexport function toInputTensor(input: PosenetInput) {\n  return input instanceof tf.Tensor ? input : tf.browser.fromPixels(input);\n}\n\nexport function toResizedInputTensor(\n    input: PosenetInput, resizeHeight: number, resizeWidth: number,\n    flipHorizontal: boolean): tf.Tensor3D {\n  return tf.tidy(() => {\n    const imageTensor = toInputTensor(input);\n\n    if (flipHorizontal) {\n      return tf.image.resizeBilinear(tf.reverse(imageTensor, 1), [resizeHeight, resizeWidth]);\n    } else {\n      return tf.image.resizeBilinear(imageTensor, [resizeHeight, resizeWidth]);\n    }\n  });\n}\n\nexport function padAndResizeTo(\n    input: PosenetInput, [targetH, targetW]: [number, number]):\n    {resized: tf.Tensor3D, padding: Padding} {\n  const [height, width] = getInputTensorDimensions(input);\n  const targetAspect = targetW / targetH;\n  const aspect = width / height;\n  let [padT, padB, padL, padR] = [0, 0, 0, 0];\n  if (aspect < targetAspect) {\n    // pads the width\n    padT = 0;\n    padB = 0;\n    padL = Math.round(0.5 * (targetAspect * height - width));\n    padR = Math.round(0.5 * (targetAspect * height - width));\n  } else {\n    // pads the height\n    padT = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\n    padB = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\n    padL = 0;\n    padR = 0;\n  }\n\n  const resized: tf.Tensor3D = tf.tidy(() => {\n    let imageTensor = toInputTensor(input);\n    imageTensor = tf.pad3d(imageTensor, [[padT, padB], [padL, padR], [0, 0]]);\n\n    return tf.image.resizeBilinear(imageTensor, [targetH, targetW]);\n  });\n\n  return {resized, padding: {top: padT, left: padL, right: padR, bottom: padB}};\n}\n\nexport function scaleAndFlipPoses(\n    poses: Pose[], [height, width]: [number, number],\n    [inputResolutionHeight, inputResolutionWidth]: [number, number],\n    padding: Padding, flipHorizontal: boolean): Pose[] {\n  const scaleY =\n      (height + padding.top + padding.bottom) / (inputResolutionHeight);\n  const scaleX =\n      (width + padding.left + padding.right) / (inputResolutionWidth);\n\n  const scaledPoses =\n      scalePoses(poses, scaleY, scaleX, -padding.top, -padding.left);\n\n  if (flipHorizontal) {\n    return flipPosesHorizontal(scaledPoses, width);\n  } else {\n    return scaledPoses;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfconv from '@tensorflow/tfjs-converter';\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {BaseModel} from './base_model';\nimport {mobileNetCheckpoint, resNet50Checkpoint} from './checkpoints';\nimport {MobileNet} from './mobilenet';\nimport {decodeMultiplePoses} from './multi_pose/decode_multiple_poses';\nimport {ResNet} from './resnet';\nimport {decodeSinglePose} from './single_pose/decode_single_pose';\nimport {InputResolution, MobileNetMultiplier, Pose, PoseNetArchitecture, PosenetInput, PoseNetOutputStride, PoseNetQuantBytes} from './types';\nimport {assertValidOutputStride, assertValidResolution, getInputTensorDimensions, getValidInputResolutionDimensions, padAndResizeTo, scaleAndFlipPoses, toTensorBuffers3D, validateInputResolution} from './util';\n\n/**\n * PoseNet model loading is configurable using the following config dictionary.\n *\n * `architecture`: PoseNetArchitecture. It determines wich PoseNet architecture\n * to load. The supported architectures are: MobileNetV1 and ResNet.\n *\n * `outputStride`: Specifies the output stride of the PoseNet model.\n * The smaller the value, the larger the output resolution, and more accurate\n * the model at the cost of speed.  Set this to a larger value to increase speed\n * at the cost of accuracy. Stride 32 is supported for ResNet and\n * stride 8,16,32 are supported for various MobileNetV1 models.\n *\n * * `inputResolution`: A number or an Object of type {width: number, height:\n * number}. Specifies the size the input image is scaled to before feeding it\n * through the PoseNet model.  The larger the value, more accurate the model at\n * the cost of speed. Set this to a smaller value to increase speed at the cost\n * of accuracy. If a number is provided, the input will be resized and padded to\n * be a square with the same width and height.  If width and height are\n * provided, the input will be resized and padded to the specified width and\n * height.\n *\n * `multiplier`: An optional number with values: 1.01, 1.0, 0.75, or\n * 0.50. The value is used only by MobileNet architecture. It is the float\n * multiplier for the depth (number of channels) for all convolution ops.\n * The larger the value, the larger the size of the layers, and more accurate\n * the model at the cost of speed. Set this to a smaller value to increase speed\n * at the cost of accuracy.\n *\n * `modelUrl`: An optional string that specifies custom url of the model. This\n * is useful for area/countries that don't have access to the model hosted on\n * GCP.\n *\n * `quantBytes`: An opional number with values: 1, 2, or 4.  This parameter\n * affects weight quantization in the models. The available options are\n * 1 byte, 2 bytes, and 4 bytes. The higher the value, the larger the model size\n * and thus the longer the loading time, the lower the value, the shorter the\n * loading time but lower the accuracy.\n */\nexport interface ModelConfig {\n  architecture: PoseNetArchitecture;\n  outputStride: PoseNetOutputStride;\n  inputResolution: InputResolution;\n  multiplier?: MobileNetMultiplier;\n  modelUrl?: string;\n  quantBytes?: PoseNetQuantBytes;\n}\n\n// The default configuration for loading MobileNetV1 based PoseNet.\n//\n// (And for references, the default configuration for loading ResNet\n// based PoseNet is also included).\n//\n// ```\n// const RESNET_CONFIG = {\n//   architecture: 'ResNet50',\n//   outputStride: 32,\n//   quantBytes: 2,\n// } as ModelConfig;\n// ```\nconst MOBILENET_V1_CONFIG: ModelConfig = {\n  architecture: 'MobileNetV1',\n  outputStride: 16,\n  multiplier: 0.75,\n  inputResolution: 257,\n} as ModelConfig;\n\nconst VALID_ARCHITECTURE = ['MobileNetV1', 'ResNet50'];\nconst VALID_STRIDE = {\n  'MobileNetV1': [8, 16, 32],\n  'ResNet50': [32, 16]\n};\n\nconst VALID_MULTIPLIER = {\n  'MobileNetV1': [0.50, 0.75, 1.0],\n  'ResNet50': [1.0]\n};\nconst VALID_QUANT_BYTES = [1, 2, 4];\n\nfunction validateModelConfig(config: ModelConfig) {\n  config = config || MOBILENET_V1_CONFIG;\n\n  if (config.architecture == null) {\n    config.architecture = 'MobileNetV1';\n  }\n  if (VALID_ARCHITECTURE.indexOf(config.architecture) < 0) {\n    throw new Error(\n        `Invalid architecture ${config.architecture}. ` +\n        `Should be one of ${VALID_ARCHITECTURE}`);\n  }\n\n  if (config.inputResolution == null) {\n    config.inputResolution = 257;\n  }\n\n  validateInputResolution(config.inputResolution);\n\n  if (config.outputStride == null) {\n    config.outputStride = 16;\n  }\n  if (VALID_STRIDE[config.architecture].indexOf(config.outputStride) < 0) {\n    throw new Error(\n        `Invalid outputStride ${config.outputStride}. ` +\n        `Should be one of ${VALID_STRIDE[config.architecture]} ` +\n        `for architecture ${config.architecture}.`);\n  }\n\n  if (config.multiplier == null) {\n    config.multiplier = 1.0;\n  }\n  if (VALID_MULTIPLIER[config.architecture].indexOf(config.multiplier) < 0) {\n    throw new Error(\n        `Invalid multiplier ${config.multiplier}. ` +\n        `Should be one of ${VALID_MULTIPLIER[config.architecture]} ` +\n        `for architecture ${config.architecture}.`);\n  }\n\n  if (config.quantBytes == null) {\n    config.quantBytes = 4;\n  }\n  if (VALID_QUANT_BYTES.indexOf(config.quantBytes) < 0) {\n    throw new Error(\n        `Invalid quantBytes ${config.quantBytes}. ` +\n        `Should be one of ${VALID_QUANT_BYTES} ` +\n        `for architecture ${config.architecture}.`);\n  }\n\n  if (config.architecture === 'MobileNetV1' && config.outputStride === 32 &&\n      config.multiplier !== 1) {\n    throw new Error(\n        `When using an output stride of 32, ` +\n        `you must select 1 as the multiplier.`);\n  }\n\n  return config;\n}\n\n/**\n * PoseNet inference is configurable using the following config dictionary.\n *\n * `flipHorizontal`: If the poses should be flipped/mirrored horizontally.\n * This should be set to true for videos where the video is by default flipped\n * horizontally (i.e. a webcam), and you want the poses to be returned in the\n * proper orientation.\n *\n */\nexport interface InferenceConfig {\n  flipHorizontal: boolean;\n}\n\n/**\n * Single Person Inference Config\n */\nexport interface SinglePersonInterfaceConfig extends InferenceConfig {}\n\n/**\n * Multiple Person Inference Config\n *\n * `maxDetections`: Maximum number of returned instance detections per image.\n *\n * `scoreThreshold`: Only return instance detections that have root part\n * score greater or equal to this value. Defaults to 0.5\n *\n * `nmsRadius`: Non-maximum suppression part distance in pixels. It needs\n * to be strictly positive. Two parts suppress each other if they are less\n * than `nmsRadius` pixels away. Defaults to 20.\n */\nexport interface MultiPersonInferenceConfig extends InferenceConfig {\n  maxDetections?: number;\n  scoreThreshold?: number;\n  nmsRadius?: number;\n}\n\n// these added back to not break the existing api.\nexport interface LegacyMultiPersonInferenceConfig extends\n    MultiPersonInferenceConfig {\n  decodingMethod: 'multi-person';\n}\n\nexport interface LegacySinglePersonInferenceConfig extends\n    SinglePersonInterfaceConfig {\n  decodingMethod: 'single-person';\n}\n\nexport const SINGLE_PERSON_INFERENCE_CONFIG: SinglePersonInterfaceConfig = {\n  flipHorizontal: false\n};\n\nexport const MULTI_PERSON_INFERENCE_CONFIG: MultiPersonInferenceConfig = {\n  flipHorizontal: false,\n  maxDetections: 5,\n  scoreThreshold: 0.5,\n  nmsRadius: 20\n};\n\nfunction validateSinglePersonInferenceConfig(\n    config: SinglePersonInterfaceConfig) {}\n\nfunction validateMultiPersonInputConfig(config: MultiPersonInferenceConfig) {\n  const {maxDetections, scoreThreshold, nmsRadius} = config;\n\n  if (maxDetections <= 0) {\n    throw new Error(\n        `Invalid maxDetections ${maxDetections}. ` +\n        `Should be > 0`);\n  }\n\n  if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\n    throw new Error(\n        `Invalid scoreThreshold ${scoreThreshold}. ` +\n        `Should be in range [0.0, 1.0]`);\n  }\n\n  if (nmsRadius <= 0) {\n    throw new Error(`Invalid nmsRadius ${nmsRadius}.`);\n  }\n}\n\nexport class PoseNet {\n  readonly baseModel: BaseModel;\n  readonly inputResolution: [number, number];\n\n  constructor(net: BaseModel, inputResolution: [number, number]) {\n    assertValidOutputStride(net.outputStride);\n    assertValidResolution(inputResolution, net.outputStride);\n\n    this.baseModel = net;\n    this.inputResolution = inputResolution;\n  }\n\n  /**\n   * Infer through PoseNet, and estimates multiple poses using the outputs.\n   * This does standard ImageNet pre-processing before inferring through the\n   * model. The image should pixels should have values [0-255]. It detects\n   * multiple poses and finds their parts from part scores and displacement\n   * vectors using a fast greedy decoding algorithm.  It returns up to\n   * `config.maxDetections` object instance detections in decreasing root\n   * score order.\n   *\n   * @param input\n   * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\n   * image to feed through the network.\n   *\n   * @param config MultiPoseEstimationConfig object that contains parameters\n   * for the PoseNet inference using multiple pose estimation.\n   *\n   * @return An array of poses and their scores, each containing keypoints and\n   * the corresponding keypoint scores.  The positions of the keypoints are\n   * in the same scale as the original image\n   */\n  async estimateMultiplePoses(\n      input: PosenetInput,\n      config: MultiPersonInferenceConfig = MULTI_PERSON_INFERENCE_CONFIG):\n      Promise<Pose[]> {\n    const configWithDefaults: MultiPersonInferenceConfig = {\n      ...MULTI_PERSON_INFERENCE_CONFIG,\n      ...config\n    };\n\n    validateMultiPersonInputConfig(config);\n\n    const outputStride = this.baseModel.outputStride;\n    const inputResolution = this.inputResolution;\n\n    const [height, width] = getInputTensorDimensions(input);\n\n    const {resized, padding} = padAndResizeTo(input, inputResolution);\n\n    const {heatmapScores, offsets, displacementFwd, displacementBwd} =\n        this.baseModel.predict(resized);\n\n    const allTensorBuffers = await toTensorBuffers3D(\n        [heatmapScores, offsets, displacementFwd, displacementBwd]);\n\n    const scoresBuffer = allTensorBuffers[0];\n    const offsetsBuffer = allTensorBuffers[1];\n    const displacementsFwdBuffer = allTensorBuffers[2];\n    const displacementsBwdBuffer = allTensorBuffers[3];\n\n    const poses = await decodeMultiplePoses(\n        scoresBuffer, offsetsBuffer, displacementsFwdBuffer,\n        displacementsBwdBuffer, outputStride, configWithDefaults.maxDetections,\n        configWithDefaults.scoreThreshold, configWithDefaults.nmsRadius);\n\n    const resultPoses = scaleAndFlipPoses(\n        poses, [height, width], inputResolution, padding,\n        configWithDefaults.flipHorizontal);\n\n    heatmapScores.dispose();\n    offsets.dispose();\n    displacementFwd.dispose();\n    displacementBwd.dispose();\n    resized.dispose();\n\n    return resultPoses;\n  }\n\n  /**\n   * Infer through PoseNet, and estimates a single pose using the outputs.\n   * This does standard ImageNet pre-processing before inferring through the\n   * model. The image should pixels should have values [0-255]. It detects\n   * multiple poses and finds their parts from part scores and displacement\n   * vectors using a fast greedy decoding algorithm.  It returns a single pose\n   *\n   * @param input\n   * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\n   * image to feed through the network.\n   *\n   * @param config SinglePersonEstimationConfig object that contains\n   * parameters for the PoseNet inference using single pose estimation.\n   *\n   * @return An pose and its scores, containing keypoints and\n   * the corresponding keypoint scores.  The positions of the keypoints are\n   * in the same scale as the original image\n   */\n  async estimateSinglePose(\n      input: PosenetInput,\n      config: SinglePersonInterfaceConfig = SINGLE_PERSON_INFERENCE_CONFIG):\n      Promise<Pose> {\n    const configWithDefaults = {...SINGLE_PERSON_INFERENCE_CONFIG, ...config};\n\n    validateSinglePersonInferenceConfig(configWithDefaults);\n\n    const outputStride = this.baseModel.outputStride;\n    const inputResolution = this.inputResolution;\n\n    const [height, width] = getInputTensorDimensions(input);\n\n    const {resized, padding} = padAndResizeTo(input, inputResolution);\n\n    const {heatmapScores, offsets, displacementFwd, displacementBwd} =\n        this.baseModel.predict(resized);\n\n    const pose = await decodeSinglePose(heatmapScores, offsets, outputStride);\n    const poses = [pose];\n\n    const resultPoses = scaleAndFlipPoses(\n        poses, [height, width], inputResolution, padding,\n        configWithDefaults.flipHorizontal);\n\n    heatmapScores.dispose();\n    offsets.dispose();\n    displacementFwd.dispose();\n    displacementBwd.dispose();\n    resized.dispose();\n\n    return resultPoses[0];\n  }\n\n  /** Deprecated: Use either estimateSinglePose or estimateMultiplePoses */\n  async estimatePoses(\n      input: PosenetInput,\n      config: LegacySinglePersonInferenceConfig|\n      LegacyMultiPersonInferenceConfig): Promise<Pose[]> {\n    if (config.decodingMethod === 'single-person') {\n      const pose = await this.estimateSinglePose(input, config);\n      return [pose];\n    } else {\n      return this.estimateMultiplePoses(input, config);\n    }\n  }\n\n  public dispose() {\n    this.baseModel.dispose();\n  }\n}\n\nasync function loadMobileNet(config: ModelConfig): Promise<PoseNet> {\n  const outputStride = config.outputStride;\n  const quantBytes = config.quantBytes;\n  const multiplier = config.multiplier;\n  if (tf == null) {\n    throw new Error(\n        `Cannot find TensorFlow.js. If you are using a <script> tag, please ` +\n        `also include @tensorflow/tfjs on the page before using this\n        model.`);\n  }\n\n  const url = mobileNetCheckpoint(outputStride, multiplier, quantBytes);\n  const graphModel = await tfconv.loadGraphModel(config.modelUrl || url);\n  const mobilenet = new MobileNet(graphModel, outputStride);\n\n  const validInputResolution = getValidInputResolutionDimensions(\n      config.inputResolution, mobilenet.outputStride);\n\n  return new PoseNet(mobilenet, validInputResolution);\n}\n\nasync function loadResNet(config: ModelConfig): Promise<PoseNet> {\n  const outputStride = config.outputStride;\n  const quantBytes = config.quantBytes;\n  if (tf == null) {\n    throw new Error(\n        `Cannot find TensorFlow.js. If you are using a <script> tag, please ` +\n        `also include @tensorflow/tfjs on the page before using this\n        model.`);\n  }\n\n  const url = resNet50Checkpoint(outputStride, quantBytes);\n  const graphModel = await tfconv.loadGraphModel(config.modelUrl || url);\n  const resnet = new ResNet(graphModel, outputStride);\n  const validInputResolution = getValidInputResolutionDimensions(\n      config.inputResolution, resnet.outputStride);\n  return new PoseNet(resnet, validInputResolution);\n}\n\n/**\n * Loads the PoseNet model instance from a checkpoint, with the ResNet\n * or MobileNet architecture. The model to be loaded is configurable using the\n * config dictionary ModelConfig. Please find more details in the\n * documentation of the ModelConfig.\n *\n * @param config ModelConfig dictionary that contains parameters for\n * the PoseNet loading process. Please find more details of each parameters\n * in the documentation of the ModelConfig interface. The predefined\n * `MOBILENET_V1_CONFIG` and `RESNET_CONFIG` can also be used as references\n * for defining your customized config.\n */\nexport async function load(config: ModelConfig = MOBILENET_V1_CONFIG):\n    Promise<PoseNet> {\n  config = validateModelConfig(config);\n  if (config.architecture === 'ResNet50') {\n    return loadResNet(config);\n  } else if (config.architecture === 'MobileNetV1') {\n    return loadMobileNet(config);\n  } else {\n    return null;\n  }\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.2.2';\nexport {version};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MobileNet} from './mobilenet';\nimport {decodeMultiplePoses} from './multi_pose/decode_multiple_poses';\nimport {decodeSinglePose} from './single_pose/decode_single_pose';\n\nexport {partChannels, partIds, partNames, poseChain} from './keypoints';\nexport {load, ModelConfig, MultiPersonInferenceConfig, PoseNet, SinglePersonInterfaceConfig} from './posenet_model';\nexport {InputResolution, Keypoint, MobileNetMultiplier, Pose, PoseNetOutputStride} from './types';\nexport {getAdjacentKeyPoints, getBoundingBox, getBoundingBoxPoints, scaleAndFlipPoses, scalePose} from './util';\nexport {version} from './version';\nexport {decodeMultiplePoses, decodeSinglePose, MobileNet};\n"],"names":["tf.util","tf.tidy","tf.cast","tf.expandDims","tf.squeeze","tf.sigmoid","tslib_1.__extends","tf.sub","tf.div","tf.scalar","tf.mul","tf.reshape","tf.argMax","tf.concat","getOffsetPoint","tf.tensor2d","tf\r\n            .add","tf\r\n            .cast","tf\r\n            .mul","tf.add","tf.Tensor","tf.browser","tf.pad3d","tf.image","tfconv.loadGraphModel"],"mappings":"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"}