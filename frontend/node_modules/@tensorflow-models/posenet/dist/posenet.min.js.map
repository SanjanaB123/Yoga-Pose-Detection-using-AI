{"version":3,"file":"posenet.min.js","sources":["../src/base_model.ts","../src/mobilenet.ts","../src/multi_pose/max_heap.ts","../src/multi_pose/build_part_with_score_queue.ts","../src/keypoints.ts","../src/multi_pose/util.ts","../src/multi_pose/decode_pose.ts","../src/multi_pose/decode_multiple_poses.ts","../src/single_pose/argmax2d.ts","../src/single_pose/util.ts","../src/single_pose/decode_single_pose.ts","../src/checkpoints.ts","../src/resnet.ts","../src/util.ts","../src/posenet_model.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfconv from '@tensorflow/tfjs-converter';\nimport * as tf from '@tensorflow/tfjs-core';\nimport {PoseNetOutputStride} from './types';\n\n/**\n * PoseNet supports using various convolution neural network models\n * (e.g. ResNet and MobileNetV1) as its underlying base model.\n * The following BaseModel interface defines a unified interface for\n * creating such PoseNet base models. Currently both MobileNet (in\n * ./mobilenet.ts) and ResNet (in ./resnet.ts) implements the BaseModel\n * interface. New base models that conform to the BaseModel interface can be\n * added to PoseNet.\n */\nexport abstract class BaseModel {\n  constructor(\n      protected readonly model: tfconv.GraphModel,\n      public readonly outputStride: PoseNetOutputStride) {\n    const inputShape =\n        this.model.inputs[0].shape as [number, number, number, number];\n    tf.util.assert(\n        (inputShape[1] === -1) && (inputShape[2] === -1),\n        () => `Input shape [${inputShape[1]}, ${inputShape[2]}] ` +\n            `must both be equal to or -1`);\n  }\n\n  abstract preprocessInput(input: tf.Tensor3D): tf.Tensor3D;\n\n  /**\n   * Predicts intermediate Tensor representations.\n   *\n   * @param input The input RGB image of the base model.\n   * A Tensor of shape: [`inputResolution`, `inputResolution`, 3].\n   *\n   * @return A dictionary of base model's intermediate predictions.\n   * The returned dictionary should contains the following elements:\n   * heatmapScores: A Tensor3D that represents the heatmapScores.\n   * offsets: A Tensor3D that represents the offsets.\n   * displacementFwd: A Tensor3D that represents the forward displacement.\n   * displacementBwd: A Tensor3D that represents the backward displacement.\n   */\n  predict(input: tf.Tensor3D): {\n    heatmapScores: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D\n  } {\n    return tf.tidy(() => {\n      const asFloat = this.preprocessInput(tf.cast(input, 'float32'));\n      const asBatch = tf.expandDims(asFloat, 0);\n      const results = this.model.predict(asBatch) as tf.Tensor4D[];\n      const results3d: tf.Tensor3D[] = results.map(y => tf.squeeze(y, [0]));\n\n      const namedResults = this.nameOutputResults(results3d);\n\n      return {\n        heatmapScores: tf.sigmoid(namedResults.heatmap),\n        offsets: namedResults.offsets,\n        displacementFwd: namedResults.displacementFwd,\n        displacementBwd: namedResults.displacementBwd\n      };\n    });\n  }\n\n  // Because MobileNet and ResNet predict() methods output a different order for\n  // these values, we have a method that needs to be implemented to order them.\n  abstract nameOutputResults(results: tf.Tensor3D[]): {\n    heatmap: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D\n  };\n\n  /**\n   * Releases the CPU and GPU memory allocated by the model.\n   */\n  dispose() {\n    this.model.dispose();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BaseModel} from './base_model';\n\nexport class MobileNet extends BaseModel {\n  preprocessInput(input: tf.Tensor3D): tf.Tensor3D {\n    // Normalize the pixels [0, 255] to be between [-1, 1].\n    return tf.tidy(() => tf.sub(tf.div(input, 127.5), 1.0));\n  }\n\n  nameOutputResults(results: tf.Tensor3D[]) {\n    const [offsets, heatmap, displacementFwd, displacementBwd] = results;\n    return {offsets, heatmap, displacementFwd, displacementBwd};\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// algorithm based on Coursera Lecture from Algorithms, Part 1:\n// https://www.coursera.org/learn/algorithms-part1/lecture/ZjoSM/heapsort\n\nfunction half(k: number) {\n  return Math.floor(k / 2);\n}\n\nexport class MaxHeap<T> {\n  private priorityQueue: T[];\n  private numberOfElements: number;\n  private getElementValue: (element: T) => number;\n\n  constructor(maxSize: number, getElementValue: (element: T) => number) {\n    this.priorityQueue = new Array(maxSize);\n    this.numberOfElements = -1;\n    this.getElementValue = getElementValue;\n  }\n\n  public enqueue(x: T): void {\n    this.priorityQueue[++this.numberOfElements] = x;\n    this.swim(this.numberOfElements);\n  }\n\n  public dequeue(): T {\n    const max = this.priorityQueue[0];\n    this.exchange(0, this.numberOfElements--);\n    this.sink(0);\n    this.priorityQueue[this.numberOfElements + 1] = null;\n    return max;\n  }\n\n  public empty(): boolean {\n    return this.numberOfElements === -1;\n  }\n\n  public size(): number {\n    return this.numberOfElements + 1;\n  }\n\n  public all(): T[] {\n    return this.priorityQueue.slice(0, this.numberOfElements + 1);\n  }\n\n  public max(): T {\n    return this.priorityQueue[0];\n  }\n\n  private swim(k: number): void {\n    while (k > 0 && this.less(half(k), k)) {\n      this.exchange(k, half(k));\n      k = half(k);\n    }\n  }\n\n  private sink(k: number): void {\n    while (2 * k <= this.numberOfElements) {\n      let j = 2 * k;\n      if (j < this.numberOfElements && this.less(j, j + 1)) {\n        j++;\n      }\n      if (!this.less(k, j)) {\n        break;\n      }\n      this.exchange(k, j);\n      k = j;\n    }\n  }\n\n  private getValueAt(i: number): number {\n    return this.getElementValue(this.priorityQueue[i]);\n  }\n\n  private less(i: number, j: number): boolean {\n    return this.getValueAt(i) < this.getValueAt(j);\n  }\n\n  private exchange(i: number, j: number): void {\n    const t = this.priorityQueue[i];\n    this.priorityQueue[i] = this.priorityQueue[j];\n    this.priorityQueue[j] = t;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PartWithScore, TensorBuffer3D} from '../types';\n\nimport {MaxHeap} from './max_heap';\n\nfunction scoreIsMaximumInLocalWindow(\n    keypointId: number, score: number, heatmapY: number, heatmapX: number,\n    localMaximumRadius: number, scores: TensorBuffer3D): boolean {\n  const [height, width] = scores.shape;\n\n  let localMaximum = true;\n  const yStart = Math.max(heatmapY - localMaximumRadius, 0);\n  const yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);\n  for (let yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {\n    const xStart = Math.max(heatmapX - localMaximumRadius, 0);\n    const xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);\n    for (let xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {\n      if (scores.get(yCurrent, xCurrent, keypointId) > score) {\n        localMaximum = false;\n        break;\n      }\n    }\n    if (!localMaximum) {\n      break;\n    }\n  }\n\n  return localMaximum;\n}\n\n/**\n * Builds a priority queue with part candidate positions for a specific image in\n * the batch. For this we find all local maxima in the score maps with score\n * values above a threshold. We create a single priority queue across all parts.\n */\nexport function buildPartWithScoreQueue(\n    scoreThreshold: number, localMaximumRadius: number,\n    scores: TensorBuffer3D): MaxHeap<PartWithScore> {\n  const [height, width, numKeypoints] = scores.shape;\n\n  const queue = new MaxHeap<PartWithScore>(\n      height * width * numKeypoints, ({score}) => score);\n\n  for (let heatmapY = 0; heatmapY < height; ++heatmapY) {\n    for (let heatmapX = 0; heatmapX < width; ++heatmapX) {\n      for (let keypointId = 0; keypointId < numKeypoints; ++keypointId) {\n        const score = scores.get(heatmapY, heatmapX, keypointId);\n\n        // Only consider parts with score greater or equal to threshold as\n        // root candidates.\n        if (score < scoreThreshold) {\n          continue;\n        }\n\n        // Only consider keypoints whose score is maximum in a local window.\n        if (scoreIsMaximumInLocalWindow(\n                keypointId, score, heatmapY, heatmapX, localMaximumRadius,\n                scores)) {\n          queue.enqueue({score, part: {heatmapY, heatmapX, id: keypointId}});\n        }\n      }\n    }\n  }\n\n  return queue;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport type Tuple<T> = [T, T];\nexport type StringTuple = Tuple<string>;\nexport type NumberTuple = Tuple<number>;\n\nexport const partNames = [\n  'nose', 'leftEye', 'rightEye', 'leftEar', 'rightEar', 'leftShoulder',\n  'rightShoulder', 'leftElbow', 'rightElbow', 'leftWrist', 'rightWrist',\n  'leftHip', 'rightHip', 'leftKnee', 'rightKnee', 'leftAnkle', 'rightAnkle'\n];\n\nexport const NUM_KEYPOINTS = partNames.length;\n\nexport interface NumberDict {\n  [jointName: string]: number;\n}\n\nexport const partIds =\n    partNames.reduce((result: NumberDict, jointName, i): NumberDict => {\n      result[jointName] = i;\n      return result;\n    }, {}) as NumberDict;\n\nconst connectedPartNames: StringTuple[] = [\n  ['leftHip', 'leftShoulder'], ['leftElbow', 'leftShoulder'],\n  ['leftElbow', 'leftWrist'], ['leftHip', 'leftKnee'],\n  ['leftKnee', 'leftAnkle'], ['rightHip', 'rightShoulder'],\n  ['rightElbow', 'rightShoulder'], ['rightElbow', 'rightWrist'],\n  ['rightHip', 'rightKnee'], ['rightKnee', 'rightAnkle'],\n  ['leftShoulder', 'rightShoulder'], ['leftHip', 'rightHip']\n];\n\n/*\n * Define the skeleton. This defines the parent->child relationships of our\n * tree. Arbitrarily this defines the nose as the root of the tree, however\n * since we will infer the displacement for both parent->child and\n * child->parent, we can define the tree root as any node.\n */\nexport const poseChain: StringTuple[] = [\n  ['nose', 'leftEye'], ['leftEye', 'leftEar'], ['nose', 'rightEye'],\n  ['rightEye', 'rightEar'], ['nose', 'leftShoulder'],\n  ['leftShoulder', 'leftElbow'], ['leftElbow', 'leftWrist'],\n  ['leftShoulder', 'leftHip'], ['leftHip', 'leftKnee'],\n  ['leftKnee', 'leftAnkle'], ['nose', 'rightShoulder'],\n  ['rightShoulder', 'rightElbow'], ['rightElbow', 'rightWrist'],\n  ['rightShoulder', 'rightHip'], ['rightHip', 'rightKnee'],\n  ['rightKnee', 'rightAnkle']\n];\n\nexport const connectedPartIndices = connectedPartNames.map(\n    ([jointNameA, jointNameB]) => ([partIds[jointNameA], partIds[jointNameB]]));\n\nexport const partChannels: string[] = [\n  'left_face',\n  'right_face',\n  'right_upper_leg_front',\n  'right_lower_leg_back',\n  'right_upper_leg_back',\n  'left_lower_leg_front',\n  'left_upper_leg_front',\n  'left_upper_leg_back',\n  'left_lower_leg_back',\n  'right_feet',\n  'right_lower_leg_front',\n  'left_feet',\n  'torso_front',\n  'torso_back',\n  'right_upper_arm_front',\n  'right_upper_arm_back',\n  'right_lower_arm_back',\n  'left_lower_arm_front',\n  'left_upper_arm_front',\n  'left_upper_arm_back',\n  'left_lower_arm_back',\n  'right_hand',\n  'right_lower_arm_front',\n  'left_hand'\n];\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NUM_KEYPOINTS} from '../keypoints';\nimport {Part, TensorBuffer3D, Vector2D} from '../types';\n\nexport function getOffsetPoint(\n    y: number, x: number, keypoint: number, offsets: TensorBuffer3D): Vector2D {\n  return {\n    y: offsets.get(y, x, keypoint),\n    x: offsets.get(y, x, keypoint + NUM_KEYPOINTS)\n  };\n}\n\nexport function getImageCoords(\n    part: Part, outputStride: number, offsets: TensorBuffer3D): Vector2D {\n  const {heatmapY, heatmapX, id: keypoint} = part;\n  const {y, x} = getOffsetPoint(heatmapY, heatmapX, keypoint, offsets);\n  return {\n    x: part.heatmapX * outputStride + x,\n    y: part.heatmapY * outputStride + y\n  };\n}\n\nexport function fillArray<T>(element: T, size: number): T[] {\n  const result: T[] = new Array(size);\n\n  for (let i = 0; i < size; i++) {\n    result[i] = element;\n  }\n\n  return result;\n}\n\nexport function clamp(a: number, min: number, max: number): number {\n  if (a < min) {\n    return min;\n  }\n  if (a > max) {\n    return max;\n  }\n  return a;\n}\n\nexport function squaredDistance(\n    y1: number, x1: number, y2: number, x2: number): number {\n  const dy = y2 - y1;\n  const dx = x2 - x1;\n  return dy * dy + dx * dx;\n}\n\nexport function addVectors(a: Vector2D, b: Vector2D): Vector2D {\n  return {x: a.x + b.x, y: a.y + b.y};\n}\n\nexport function clampVector(a: Vector2D, min: number, max: number): Vector2D {\n  return {y: clamp(a.y, min, max), x: clamp(a.x, min, max)};\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumberTuple, partIds, partNames, poseChain} from '../keypoints';\nimport {Keypoint, PartWithScore, TensorBuffer3D, Vector2D} from '../types';\n\nimport {clamp, getOffsetPoint} from './util';\nimport {addVectors, getImageCoords} from './util';\n\nconst parentChildrenTuples: NumberTuple[] = poseChain.map(\n    ([parentJoinName, childJoinName]): NumberTuple =>\n        ([partIds[parentJoinName], partIds[childJoinName]]));\n\nconst parentToChildEdges: number[] =\n    parentChildrenTuples.map(([, childJointId]) => childJointId);\n\nconst childToParentEdges: number[] =\n    parentChildrenTuples.map(([\n                               parentJointId,\n                             ]) => parentJointId);\n\nfunction getDisplacement(\n    edgeId: number, point: Vector2D, displacements: TensorBuffer3D): Vector2D {\n  const numEdges = displacements.shape[2] / 2;\n  return {\n    y: displacements.get(point.y, point.x, edgeId),\n    x: displacements.get(point.y, point.x, numEdges + edgeId)\n  };\n}\n\nfunction getStridedIndexNearPoint(\n    point: Vector2D, outputStride: number, height: number,\n    width: number): Vector2D {\n  return {\n    y: clamp(Math.round(point.y / outputStride), 0, height - 1),\n    x: clamp(Math.round(point.x / outputStride), 0, width - 1)\n  };\n}\n\n/**\n * We get a new keypoint along the `edgeId` for the pose instance, assuming\n * that the position of the `idSource` part is already known. For this, we\n * follow the displacement vector from the source to target part (stored in\n * the `i`-t channel of the displacement tensor). The displaced keypoint\n * vector is refined using the offset vector by `offsetRefineStep` times.\n */\nfunction traverseToTargetKeypoint(\n    edgeId: number, sourceKeypoint: Keypoint, targetKeypointId: number,\n    scoresBuffer: TensorBuffer3D, offsets: TensorBuffer3D, outputStride: number,\n    displacements: TensorBuffer3D, offsetRefineStep = 2): Keypoint {\n  const [height, width] = scoresBuffer.shape;\n\n  // Nearest neighbor interpolation for the source->target displacements.\n  const sourceKeypointIndices = getStridedIndexNearPoint(\n      sourceKeypoint.position, outputStride, height, width);\n\n  const displacement =\n      getDisplacement(edgeId, sourceKeypointIndices, displacements);\n\n  const displacedPoint = addVectors(sourceKeypoint.position, displacement);\n  let targetKeypoint = displacedPoint;\n  for (let i = 0; i < offsetRefineStep; i++) {\n    const targetKeypointIndices =\n        getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\n\n    const offsetPoint = getOffsetPoint(\n        targetKeypointIndices.y, targetKeypointIndices.x, targetKeypointId,\n        offsets);\n\n    targetKeypoint = addVectors(\n        {\n          x: targetKeypointIndices.x * outputStride,\n          y: targetKeypointIndices.y * outputStride\n        },\n        {x: offsetPoint.x, y: offsetPoint.y});\n  }\n  const targetKeyPointIndices =\n      getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\n  const score = scoresBuffer.get(\n      targetKeyPointIndices.y, targetKeyPointIndices.x, targetKeypointId);\n\n  return {position: targetKeypoint, part: partNames[targetKeypointId], score};\n}\n\n/**\n * Follows the displacement fields to decode the full pose of the object\n * instance given the position of a part that acts as root.\n *\n * @return An array of decoded keypoints and their scores for a single pose\n */\nexport function decodePose(\n    root: PartWithScore, scores: TensorBuffer3D, offsets: TensorBuffer3D,\n    outputStride: number, displacementsFwd: TensorBuffer3D,\n    displacementsBwd: TensorBuffer3D): Keypoint[] {\n  const numParts = scores.shape[2];\n  const numEdges = parentToChildEdges.length;\n\n  const instanceKeypoints: Keypoint[] = new Array(numParts);\n  // Start a new detection instance at the position of the root.\n  const {part: rootPart, score: rootScore} = root;\n  const rootPoint = getImageCoords(rootPart, outputStride, offsets);\n\n  instanceKeypoints[rootPart.id] = {\n    score: rootScore,\n    part: partNames[rootPart.id],\n    position: rootPoint\n  };\n\n  // Decode the part positions upwards in the tree, following the backward\n  // displacements.\n  for (let edge = numEdges - 1; edge >= 0; --edge) {\n    const sourceKeypointId = parentToChildEdges[edge];\n    const targetKeypointId = childToParentEdges[edge];\n    if (instanceKeypoints[sourceKeypointId] &&\n        !instanceKeypoints[targetKeypointId]) {\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(\n          edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores,\n          offsets, outputStride, displacementsBwd);\n    }\n  }\n\n  // Decode the part positions downwards in the tree, following the forward\n  // displacements.\n  for (let edge = 0; edge < numEdges; ++edge) {\n    const sourceKeypointId = childToParentEdges[edge];\n    const targetKeypointId = parentToChildEdges[edge];\n    if (instanceKeypoints[sourceKeypointId] &&\n        !instanceKeypoints[targetKeypointId]) {\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(\n          edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores,\n          offsets, outputStride, displacementsFwd);\n    }\n  }\n\n  return instanceKeypoints;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Keypoint, Pose, TensorBuffer3D} from '../types';\n\nimport {buildPartWithScoreQueue} from './build_part_with_score_queue';\nimport {decodePose} from './decode_pose';\nimport {getImageCoords, squaredDistance} from './util';\n\nfunction withinNmsRadiusOfCorrespondingPoint(\n    poses: Pose[], squaredNmsRadius: number, {x, y}: {x: number, y: number},\n    keypointId: number): boolean {\n  return poses.some(({keypoints}) => {\n    const correspondingKeypoint = keypoints[keypointId].position;\n    return squaredDistance(\n               y, x, correspondingKeypoint.y, correspondingKeypoint.x) <=\n        squaredNmsRadius;\n  });\n}\n\n/* Score the newly proposed object instance without taking into account\n * the scores of the parts that overlap with any previously detected\n * instance.\n */\nfunction getInstanceScore(\n    existingPoses: Pose[], squaredNmsRadius: number,\n    instanceKeypoints: Keypoint[]): number {\n  let notOverlappedKeypointScores = instanceKeypoints.reduce(\n      (result, {position, score}, keypointId): number => {\n        if (!withinNmsRadiusOfCorrespondingPoint(\n                existingPoses, squaredNmsRadius, position, keypointId)) {\n          result += score;\n        }\n        return result;\n      }, 0.0);\n\n  return notOverlappedKeypointScores /= instanceKeypoints.length;\n}\n\n// A point (y, x) is considered as root part candidate if its score is a\n// maximum in a window |y - y'| <= kLocalMaximumRadius, |x - x'| <=\n// kLocalMaximumRadius.\nconst kLocalMaximumRadius = 1;\n\n/**\n * Detects multiple poses and finds their parts from part scores and\n * displacement vectors. It returns up to `maxDetections` object instance\n * detections in decreasing root score order. It works as follows: We first\n * create a priority queue with local part score maxima above\n * `scoreThreshold`, considering all parts at the same time. Then we\n * iteratively pull the top  element of the queue (in decreasing score order)\n * and treat it as a root candidate for a new object instance. To avoid\n * duplicate detections, we reject the root candidate if it is within a disk\n * of `nmsRadius` pixels from the corresponding part of a previously detected\n * instance, which is a form of part-based non-maximum suppression (NMS). If\n * the root candidate passes the NMS check, we start a new object instance\n * detection, treating the corresponding part as root and finding the\n * positions of the remaining parts by following the displacement vectors\n * along the tree-structured part graph. We assign to the newly detected\n * instance a score equal to the sum of scores of its parts which have not\n * been claimed by a previous instance (i.e., those at least `nmsRadius`\n * pixels away from the corresponding part of all previously detected\n * instances), divided by the total number of parts `numParts`.\n *\n * @param heatmapScores 3-D tensor with shape `[height, width, numParts]`.\n * The value of heatmapScores[y, x, k]` is the score of placing the `k`-th\n * object part at position `(y, x)`.\n *\n * @param offsets 3-D tensor with shape `[height, width, numParts * 2]`.\n * The value of [offsets[y, x, k], offsets[y, x, k + numParts]]` is the\n * short range offset vector of the `k`-th  object part at heatmap\n * position `(y, x)`.\n *\n * @param displacementsFwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the forward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param displacementsBwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the backward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param outputStride The output stride that was used when feed-forwarding\n * through the PoseNet model.  Must be 32, 16, or 8.\n *\n * @param maxPoseDetections Maximum number of returned instance detections per\n * image.\n *\n * @param scoreThreshold Only return instance detections that have root part\n * score greater or equal to this value. Defaults to 0.5.\n *\n * @param nmsRadius Non-maximum suppression part distance. It needs to be\n * strictly positive. Two parts suppress each other if they are less than\n * `nmsRadius` pixels away. Defaults to 20.\n *\n * @return An array of poses and their scores, each containing keypoints and\n * the corresponding keypoint scores.\n */\nexport function decodeMultiplePoses(\n    scoresBuffer: TensorBuffer3D, offsetsBuffer: TensorBuffer3D,\n    displacementsFwdBuffer: TensorBuffer3D,\n    displacementsBwdBuffer: TensorBuffer3D, outputStride: number,\n    maxPoseDetections: number, scoreThreshold = 0.5, nmsRadius = 20): Pose[] {\n  const poses: Pose[] = [];\n\n  const queue = buildPartWithScoreQueue(\n      scoreThreshold, kLocalMaximumRadius, scoresBuffer);\n\n  const squaredNmsRadius = nmsRadius * nmsRadius;\n\n  // Generate at most maxDetections object instances per image in\n  // decreasing root part score order.\n  while (poses.length < maxPoseDetections && !queue.empty()) {\n    // The top element in the queue is the next root candidate.\n    const root = queue.dequeue();\n\n    // Part-based non-maximum suppression: We reject a root candidate if it\n    // is within a disk of `nmsRadius` pixels from the corresponding part of\n    // a previously detected instance.\n    const rootImageCoords =\n        getImageCoords(root.part, outputStride, offsetsBuffer);\n    if (withinNmsRadiusOfCorrespondingPoint(\n            poses, squaredNmsRadius, rootImageCoords, root.part.id)) {\n      continue;\n    }\n\n    // Start a new detection instance at the position of the root.\n    const keypoints = decodePose(\n        root, scoresBuffer, offsetsBuffer, outputStride, displacementsFwdBuffer,\n        displacementsBwdBuffer);\n\n    const score = getInstanceScore(poses, squaredNmsRadius, keypoints);\n\n    poses.push({keypoints, score});\n  }\n\n  return poses;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nfunction mod(a: tf.Tensor1D, b: number): tf.Tensor1D {\n  return tf.tidy(() => {\n    const floored = tf.div(a, tf.scalar(b, 'int32'));\n\n    return tf.sub(a, tf.mul(floored, tf.scalar(b, 'int32')));\n  });\n}\n\nexport function argmax2d(inputs: tf.Tensor3D): tf.Tensor2D {\n  const [height, width, depth] = inputs.shape;\n\n  return tf.tidy(() => {\n    const reshaped = tf.reshape(inputs, [height * width, depth]);\n    const coords = tf.argMax(reshaped, 0);\n\n    const yCoords = tf.expandDims(tf.div(coords, tf.scalar(width, 'int32')), 1);\n    const xCoords = tf.expandDims(mod(coords as tf.Tensor1D, width), 1);\n\n    return tf.concat([yCoords, xCoords], 1);\n  }) as tf.Tensor2D;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {NUM_KEYPOINTS} from '../keypoints';\nimport {Vector2D} from '../types';\n\nexport function getPointsConfidence(\n    heatmapScores: tf.TensorBuffer<tf.Rank.R3>,\n    heatMapCoords: tf.TensorBuffer<tf.Rank.R2>): Float32Array {\n  const numKeypoints = heatMapCoords.shape[0];\n  const result = new Float32Array(numKeypoints);\n\n  for (let keypoint = 0; keypoint < numKeypoints; keypoint++) {\n    const y = heatMapCoords.get(keypoint, 0);\n    const x = heatMapCoords.get(keypoint, 1);\n    result[keypoint] = heatmapScores.get(y, x, keypoint);\n  }\n\n  return result;\n}\n\nfunction getOffsetPoint(\n    y: number, x: number, keypoint: number,\n    offsetsBuffer: tf.TensorBuffer<tf.Rank.R3>): Vector2D {\n  return {\n    y: offsetsBuffer.get(y, x, keypoint),\n    x: offsetsBuffer.get(y, x, keypoint + NUM_KEYPOINTS)\n  };\n}\n\nexport function getOffsetVectors(\n    heatMapCoordsBuffer: tf.TensorBuffer<tf.Rank.R2>,\n    offsetsBuffer: tf.TensorBuffer<tf.Rank.R3>): tf.Tensor2D {\n  const result: number[] = [];\n\n  for (let keypoint = 0; keypoint < NUM_KEYPOINTS; keypoint++) {\n    const heatmapY = heatMapCoordsBuffer.get(keypoint, 0).valueOf();\n    const heatmapX = heatMapCoordsBuffer.get(keypoint, 1).valueOf();\n\n    const {x, y} = getOffsetPoint(heatmapY, heatmapX, keypoint, offsetsBuffer);\n\n    result.push(y);\n    result.push(x);\n  }\n\n  return tf.tensor2d(result, [NUM_KEYPOINTS, 2]);\n}\n\nexport function getOffsetPoints(\n    heatMapCoordsBuffer: tf.TensorBuffer<tf.Rank.R2>, outputStride: number,\n    offsetsBuffer: tf.TensorBuffer<tf.Rank.R3>): tf.Tensor2D {\n  return tf.tidy(() => {\n    const offsetVectors = getOffsetVectors(heatMapCoordsBuffer, offsetsBuffer);\n\n    return tf\n        .add(tf\n          .cast(tf\n            .mul(heatMapCoordsBuffer.toTensor(), tf.scalar(outputStride,\n              'int32')), 'float32'), offsetVectors);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {partNames} from '../keypoints';\nimport {Keypoint, Pose, PoseNetOutputStride} from '../types';\n\nimport {argmax2d} from './argmax2d';\nimport {getOffsetPoints, getPointsConfidence} from './util';\n\n/**\n * Detects a single pose and finds its parts from part scores and offset\n * vectors. It returns a single pose detection. It works as follows:\n * argmax2d is done on the scores to get the y and x index in the heatmap\n * with the highest score for each part, which is essentially where the\n * part is most likely to exist. This produces a tensor of size 17x2, with\n * each row being the y and x index in the heatmap for each keypoint.\n * The offset vector for each for each part is retrieved by getting the\n * y and x from the offsets corresponding to the y and x index in the\n * heatmap for that part. This produces a tensor of size 17x2, with each\n * row being the offset vector for the corresponding keypoint.\n * To get the keypoint, each part’s heatmap y and x are multiplied\n * by the output stride then added to their corresponding offset vector,\n * which is in the same scale as the original image.\n *\n * @param heatmapScores 3-D tensor with shape `[height, width, numParts]`.\n * The value of heatmapScores[y, x, k]` is the score of placing the `k`-th\n * object part at position `(y, x)`.\n *\n * @param offsets 3-D tensor with shape `[height, width, numParts * 2]`.\n * The value of [offsets[y, x, k], offsets[y, x, k + numParts]]` is the\n * short range offset vector of the `k`-th  object part at heatmap\n * position `(y, x)`.\n *\n * @param outputStride The output stride that was used when feed-forwarding\n * through the PoseNet model.  Must be 32, 16, or 8.\n *\n * @return A promise that resolves with single pose with a confidence score,\n * which contains an array of keypoints indexed by part id, each with a score\n * and position.\n */\nexport async function decodeSinglePose(\n    heatmapScores: tf.Tensor3D, offsets: tf.Tensor3D,\n    outputStride: PoseNetOutputStride): Promise<Pose> {\n  let totalScore = 0.0;\n\n  const heatmapValues = argmax2d(heatmapScores);\n\n  const allTensorBuffers = await Promise.all(\n      [heatmapScores.buffer(), offsets.buffer(), heatmapValues.buffer()]);\n\n  const scoresBuffer = allTensorBuffers[0];\n  const offsetsBuffer = allTensorBuffers[1];\n  const heatmapValuesBuffer = allTensorBuffers[2];\n\n  const offsetPoints =\n      getOffsetPoints(heatmapValuesBuffer, outputStride, offsetsBuffer);\n  const offsetPointsBuffer = await offsetPoints.buffer();\n\n  const keypointConfidence =\n      Array.from(getPointsConfidence(scoresBuffer, heatmapValuesBuffer));\n\n  const keypoints = keypointConfidence.map((score, keypointId): Keypoint => {\n    totalScore += score;\n    return {\n      position: {\n        y: offsetPointsBuffer.get(keypointId, 0),\n        x: offsetPointsBuffer.get(keypointId, 1)\n      },\n      part: partNames[keypointId],\n      score\n    };\n  });\n\n  heatmapValues.dispose();\n  offsetPoints.dispose();\n\n  return {keypoints, score: totalScore / keypoints.length};\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst MOBILENET_BASE_URL =\n    'https://storage.googleapis.com/tfjs-models/savedmodel/posenet/mobilenet/';\nconst RESNET50_BASE_URL =\n    'https://storage.googleapis.com/tfjs-models/savedmodel/posenet/resnet50/';\n\n// The PoseNet 2.0 ResNet50 models use the latest TensorFlow.js 1.0 model\n// format.\nexport function resNet50Checkpoint(stride: number, quantBytes: number): string {\n  const graphJson = `model-stride${stride}.json`;\n  // quantBytes=4 corresponding to the non-quantized full-precision checkpoints.\n  if (quantBytes === 4) {\n    return RESNET50_BASE_URL + `float/` + graphJson;\n  } else {\n    return RESNET50_BASE_URL + `quant${quantBytes}/` + graphJson;\n  }\n}\n\n// The PoseNet 2.0 MobileNetV1 models use the latest TensorFlow.js 1.0 model\n// format.\nexport function mobileNetCheckpoint(\n    stride: number, multiplier: number, quantBytes: number): string {\n  const toStr: {[key: number]: string} = {1.0: '100', 0.75: '075', 0.50: '050'};\n  const graphJson = `model-stride${stride}.json`;\n  // quantBytes=4 corresponding to the non-quantized full-precision checkpoints.\n  if (quantBytes === 4) {\n    return MOBILENET_BASE_URL + `float/${toStr[multiplier]}/` + graphJson;\n  } else {\n    return MOBILENET_BASE_URL + `quant${quantBytes}/${toStr[multiplier]}/` +\n        graphJson;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {BaseModel} from './base_model';\n\nconst imageNetMean = [-123.15, -115.90, -103.06];\n\nexport class ResNet extends BaseModel {\n  preprocessInput(input: tf.Tensor3D): tf.Tensor3D {\n    return tf.add(input, imageNetMean);\n  }\n\n  nameOutputResults(results: tf.Tensor3D[]) {\n    const [displacementFwd, displacementBwd, offsets, heatmap] = results;\n    return {offsets, heatmap, displacementFwd, displacementBwd};\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {connectedPartIndices} from './keypoints';\nimport {InputResolution, Keypoint, Padding, Pose, PosenetInput, PoseNetOutputStride, TensorBuffer3D, Vector2D} from './types';\n\nfunction eitherPointDoesntMeetConfidence(\n    a: number, b: number, minConfidence: number): boolean {\n  return (a < minConfidence || b < minConfidence);\n}\n\nexport function getAdjacentKeyPoints(\n    keypoints: Keypoint[], minConfidence: number): Keypoint[][] {\n  return connectedPartIndices.reduce(\n      (result: Keypoint[][], [leftJoint, rightJoint]): Keypoint[][] => {\n        if (eitherPointDoesntMeetConfidence(\n                keypoints[leftJoint].score, keypoints[rightJoint].score,\n                minConfidence)) {\n          return result;\n        }\n\n        result.push([keypoints[leftJoint], keypoints[rightJoint]]);\n\n        return result;\n      }, []);\n}\n\nconst {NEGATIVE_INFINITY, POSITIVE_INFINITY} = Number;\nexport function getBoundingBox(keypoints: Keypoint[]):\n    {maxX: number, maxY: number, minX: number, minY: number} {\n  return keypoints.reduce(({maxX, maxY, minX, minY}, {position: {x, y}}) => {\n    return {\n      maxX: Math.max(maxX, x),\n      maxY: Math.max(maxY, y),\n      minX: Math.min(minX, x),\n      minY: Math.min(minY, y)\n    };\n  }, {\n    maxX: NEGATIVE_INFINITY,\n    maxY: NEGATIVE_INFINITY,\n    minX: POSITIVE_INFINITY,\n    minY: POSITIVE_INFINITY\n  });\n}\n\nexport function getBoundingBoxPoints(keypoints: Keypoint[]): Vector2D[] {\n  const {minX, minY, maxX, maxY} = getBoundingBox(keypoints);\n  return [\n    {x: minX, y: minY}, {x: maxX, y: minY}, {x: maxX, y: maxY},\n    {x: minX, y: maxY}\n  ];\n}\n\nexport async function toTensorBuffers3D(tensors: tf.Tensor3D[]):\n    Promise<TensorBuffer3D[]> {\n  return Promise.all(tensors.map(tensor => tensor.buffer()));\n}\n\nexport function scalePose(\n    pose: Pose, scaleY: number, scaleX: number, offsetY = 0,\n    offsetX = 0): Pose {\n  return {\n    score: pose.score,\n    keypoints: pose.keypoints.map(({score, part, position}) => ({\n                                    score,\n                                    part,\n                                    position: {\n                                      x: position.x * scaleX + offsetX,\n                                      y: position.y * scaleY + offsetY\n                                    }\n                                  }))\n  };\n}\n\nexport function scalePoses(\n    poses: Pose[], scaleY: number, scaleX: number, offsetY = 0, offsetX = 0) {\n  if (scaleX === 1 && scaleY === 1 && offsetY === 0 && offsetX === 0) {\n    return poses;\n  }\n  return poses.map(pose => scalePose(pose, scaleY, scaleX, offsetY, offsetX));\n}\n\nexport function flipPoseHorizontal(pose: Pose, imageWidth: number): Pose {\n  return {\n    score: pose.score,\n    keypoints: pose.keypoints.map(\n        ({score, part, position}) => ({\n          score,\n          part,\n          position: {x: imageWidth - 1 - position.x, y: position.y}\n        }))\n  };\n}\n\nexport function flipPosesHorizontal(poses: Pose[], imageWidth: number) {\n  if (imageWidth <= 0) {\n    return poses;\n  }\n  return poses.map(pose => flipPoseHorizontal(pose, imageWidth));\n}\n\nexport function toValidInputResolution(\n    inputResolution: number, outputStride: PoseNetOutputStride): number {\n  if (isValidInputResolution(inputResolution, outputStride)) {\n    return inputResolution;\n  }\n\n  return Math.floor(inputResolution / outputStride) * outputStride + 1;\n}\n\nexport function validateInputResolution(inputResolution: InputResolution) {\n  tf.util.assert(\n      typeof inputResolution === 'number' ||\n          typeof inputResolution === 'object',\n      () => `Invalid inputResolution ${inputResolution}. ` +\n          `Should be a number or an object with width and height`);\n\n  if (typeof inputResolution === 'object') {\n    tf.util.assert(\n        typeof inputResolution.width === 'number',\n        () => `inputResolution.width has a value of ${\n            inputResolution.width} which is invalid; it must be a number`);\n    tf.util.assert(\n        typeof inputResolution.height === 'number',\n        () => `inputResolution.height has a value of ${\n            inputResolution.height} which is invalid; it must be a number`);\n  }\n}\n\nexport function getValidInputResolutionDimensions(\n    inputResolution: InputResolution,\n    outputStride: PoseNetOutputStride): [number, number] {\n  validateInputResolution(inputResolution);\n  if (typeof inputResolution === 'object') {\n    return [\n      toValidInputResolution(inputResolution.height, outputStride),\n      toValidInputResolution(inputResolution.width, outputStride),\n    ];\n  } else {\n    return [\n      toValidInputResolution(inputResolution, outputStride),\n      toValidInputResolution(inputResolution, outputStride),\n    ];\n  }\n}\n\nconst VALID_OUTPUT_STRIDES: PoseNetOutputStride[] = [8, 16, 32];\nexport function assertValidOutputStride(outputStride: PoseNetOutputStride) {\n  tf.util.assert(\n      typeof outputStride === 'number', () => 'outputStride is not a number');\n  tf.util.assert(\n      VALID_OUTPUT_STRIDES.indexOf(outputStride) >= 0,\n      () => `outputStride of ${outputStride} is invalid. ` +\n          `It must be either 8, 16, or 32`);\n}\n\nfunction isValidInputResolution(\n    resolution: number, outputStride: number): boolean {\n  return (resolution - 1) % outputStride === 0;\n}\n\nexport function assertValidResolution(\n    resolution: [number, number], outputStride: number) {\n  tf.util.assert(\n      typeof resolution[0] === 'number' && typeof resolution[1] === 'number',\n      () => `both resolution values must be a number but had values ${\n          resolution}`);\n\n  tf.util.assert(\n      isValidInputResolution(resolution[0], outputStride),\n      () => `height of ${resolution[0]} is invalid for output stride ` +\n          `${outputStride}.`);\n\n  tf.util.assert(\n      isValidInputResolution(resolution[1], outputStride),\n      () => `width of ${resolution[1]} is invalid for output stride ` +\n          `${outputStride}.`);\n}\n\nexport function getInputTensorDimensions(input: PosenetInput):\n    [number, number] {\n  return input instanceof tf.Tensor ? [input.shape[0], input.shape[1]] :\n                                      [input.height, input.width];\n}\n\nexport function toInputTensor(input: PosenetInput) {\n  return input instanceof tf.Tensor ? input : tf.browser.fromPixels(input);\n}\n\nexport function toResizedInputTensor(\n    input: PosenetInput, resizeHeight: number, resizeWidth: number,\n    flipHorizontal: boolean): tf.Tensor3D {\n  return tf.tidy(() => {\n    const imageTensor = toInputTensor(input);\n\n    if (flipHorizontal) {\n      return tf.image.resizeBilinear(tf.reverse(imageTensor, 1), [resizeHeight, resizeWidth]);\n    } else {\n      return tf.image.resizeBilinear(imageTensor, [resizeHeight, resizeWidth]);\n    }\n  });\n}\n\nexport function padAndResizeTo(\n    input: PosenetInput, [targetH, targetW]: [number, number]):\n    {resized: tf.Tensor3D, padding: Padding} {\n  const [height, width] = getInputTensorDimensions(input);\n  const targetAspect = targetW / targetH;\n  const aspect = width / height;\n  let [padT, padB, padL, padR] = [0, 0, 0, 0];\n  if (aspect < targetAspect) {\n    // pads the width\n    padT = 0;\n    padB = 0;\n    padL = Math.round(0.5 * (targetAspect * height - width));\n    padR = Math.round(0.5 * (targetAspect * height - width));\n  } else {\n    // pads the height\n    padT = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\n    padB = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\n    padL = 0;\n    padR = 0;\n  }\n\n  const resized: tf.Tensor3D = tf.tidy(() => {\n    let imageTensor = toInputTensor(input);\n    imageTensor = tf.pad3d(imageTensor, [[padT, padB], [padL, padR], [0, 0]]);\n\n    return tf.image.resizeBilinear(imageTensor, [targetH, targetW]);\n  });\n\n  return {resized, padding: {top: padT, left: padL, right: padR, bottom: padB}};\n}\n\nexport function scaleAndFlipPoses(\n    poses: Pose[], [height, width]: [number, number],\n    [inputResolutionHeight, inputResolutionWidth]: [number, number],\n    padding: Padding, flipHorizontal: boolean): Pose[] {\n  const scaleY =\n      (height + padding.top + padding.bottom) / (inputResolutionHeight);\n  const scaleX =\n      (width + padding.left + padding.right) / (inputResolutionWidth);\n\n  const scaledPoses =\n      scalePoses(poses, scaleY, scaleX, -padding.top, -padding.left);\n\n  if (flipHorizontal) {\n    return flipPosesHorizontal(scaledPoses, width);\n  } else {\n    return scaledPoses;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfconv from '@tensorflow/tfjs-converter';\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {BaseModel} from './base_model';\nimport {mobileNetCheckpoint, resNet50Checkpoint} from './checkpoints';\nimport {MobileNet} from './mobilenet';\nimport {decodeMultiplePoses} from './multi_pose/decode_multiple_poses';\nimport {ResNet} from './resnet';\nimport {decodeSinglePose} from './single_pose/decode_single_pose';\nimport {InputResolution, MobileNetMultiplier, Pose, PoseNetArchitecture, PosenetInput, PoseNetOutputStride, PoseNetQuantBytes} from './types';\nimport {assertValidOutputStride, assertValidResolution, getInputTensorDimensions, getValidInputResolutionDimensions, padAndResizeTo, scaleAndFlipPoses, toTensorBuffers3D, validateInputResolution} from './util';\n\n/**\n * PoseNet model loading is configurable using the following config dictionary.\n *\n * `architecture`: PoseNetArchitecture. It determines wich PoseNet architecture\n * to load. The supported architectures are: MobileNetV1 and ResNet.\n *\n * `outputStride`: Specifies the output stride of the PoseNet model.\n * The smaller the value, the larger the output resolution, and more accurate\n * the model at the cost of speed.  Set this to a larger value to increase speed\n * at the cost of accuracy. Stride 32 is supported for ResNet and\n * stride 8,16,32 are supported for various MobileNetV1 models.\n *\n * * `inputResolution`: A number or an Object of type {width: number, height:\n * number}. Specifies the size the input image is scaled to before feeding it\n * through the PoseNet model.  The larger the value, more accurate the model at\n * the cost of speed. Set this to a smaller value to increase speed at the cost\n * of accuracy. If a number is provided, the input will be resized and padded to\n * be a square with the same width and height.  If width and height are\n * provided, the input will be resized and padded to the specified width and\n * height.\n *\n * `multiplier`: An optional number with values: 1.01, 1.0, 0.75, or\n * 0.50. The value is used only by MobileNet architecture. It is the float\n * multiplier for the depth (number of channels) for all convolution ops.\n * The larger the value, the larger the size of the layers, and more accurate\n * the model at the cost of speed. Set this to a smaller value to increase speed\n * at the cost of accuracy.\n *\n * `modelUrl`: An optional string that specifies custom url of the model. This\n * is useful for area/countries that don't have access to the model hosted on\n * GCP.\n *\n * `quantBytes`: An opional number with values: 1, 2, or 4.  This parameter\n * affects weight quantization in the models. The available options are\n * 1 byte, 2 bytes, and 4 bytes. The higher the value, the larger the model size\n * and thus the longer the loading time, the lower the value, the shorter the\n * loading time but lower the accuracy.\n */\nexport interface ModelConfig {\n  architecture: PoseNetArchitecture;\n  outputStride: PoseNetOutputStride;\n  inputResolution: InputResolution;\n  multiplier?: MobileNetMultiplier;\n  modelUrl?: string;\n  quantBytes?: PoseNetQuantBytes;\n}\n\n// The default configuration for loading MobileNetV1 based PoseNet.\n//\n// (And for references, the default configuration for loading ResNet\n// based PoseNet is also included).\n//\n// ```\n// const RESNET_CONFIG = {\n//   architecture: 'ResNet50',\n//   outputStride: 32,\n//   quantBytes: 2,\n// } as ModelConfig;\n// ```\nconst MOBILENET_V1_CONFIG: ModelConfig = {\n  architecture: 'MobileNetV1',\n  outputStride: 16,\n  multiplier: 0.75,\n  inputResolution: 257,\n} as ModelConfig;\n\nconst VALID_ARCHITECTURE = ['MobileNetV1', 'ResNet50'];\nconst VALID_STRIDE = {\n  'MobileNetV1': [8, 16, 32],\n  'ResNet50': [32, 16]\n};\n\nconst VALID_MULTIPLIER = {\n  'MobileNetV1': [0.50, 0.75, 1.0],\n  'ResNet50': [1.0]\n};\nconst VALID_QUANT_BYTES = [1, 2, 4];\n\nfunction validateModelConfig(config: ModelConfig) {\n  config = config || MOBILENET_V1_CONFIG;\n\n  if (config.architecture == null) {\n    config.architecture = 'MobileNetV1';\n  }\n  if (VALID_ARCHITECTURE.indexOf(config.architecture) < 0) {\n    throw new Error(\n        `Invalid architecture ${config.architecture}. ` +\n        `Should be one of ${VALID_ARCHITECTURE}`);\n  }\n\n  if (config.inputResolution == null) {\n    config.inputResolution = 257;\n  }\n\n  validateInputResolution(config.inputResolution);\n\n  if (config.outputStride == null) {\n    config.outputStride = 16;\n  }\n  if (VALID_STRIDE[config.architecture].indexOf(config.outputStride) < 0) {\n    throw new Error(\n        `Invalid outputStride ${config.outputStride}. ` +\n        `Should be one of ${VALID_STRIDE[config.architecture]} ` +\n        `for architecture ${config.architecture}.`);\n  }\n\n  if (config.multiplier == null) {\n    config.multiplier = 1.0;\n  }\n  if (VALID_MULTIPLIER[config.architecture].indexOf(config.multiplier) < 0) {\n    throw new Error(\n        `Invalid multiplier ${config.multiplier}. ` +\n        `Should be one of ${VALID_MULTIPLIER[config.architecture]} ` +\n        `for architecture ${config.architecture}.`);\n  }\n\n  if (config.quantBytes == null) {\n    config.quantBytes = 4;\n  }\n  if (VALID_QUANT_BYTES.indexOf(config.quantBytes) < 0) {\n    throw new Error(\n        `Invalid quantBytes ${config.quantBytes}. ` +\n        `Should be one of ${VALID_QUANT_BYTES} ` +\n        `for architecture ${config.architecture}.`);\n  }\n\n  if (config.architecture === 'MobileNetV1' && config.outputStride === 32 &&\n      config.multiplier !== 1) {\n    throw new Error(\n        `When using an output stride of 32, ` +\n        `you must select 1 as the multiplier.`);\n  }\n\n  return config;\n}\n\n/**\n * PoseNet inference is configurable using the following config dictionary.\n *\n * `flipHorizontal`: If the poses should be flipped/mirrored horizontally.\n * This should be set to true for videos where the video is by default flipped\n * horizontally (i.e. a webcam), and you want the poses to be returned in the\n * proper orientation.\n *\n */\nexport interface InferenceConfig {\n  flipHorizontal: boolean;\n}\n\n/**\n * Single Person Inference Config\n */\nexport interface SinglePersonInterfaceConfig extends InferenceConfig {}\n\n/**\n * Multiple Person Inference Config\n *\n * `maxDetections`: Maximum number of returned instance detections per image.\n *\n * `scoreThreshold`: Only return instance detections that have root part\n * score greater or equal to this value. Defaults to 0.5\n *\n * `nmsRadius`: Non-maximum suppression part distance in pixels. It needs\n * to be strictly positive. Two parts suppress each other if they are less\n * than `nmsRadius` pixels away. Defaults to 20.\n */\nexport interface MultiPersonInferenceConfig extends InferenceConfig {\n  maxDetections?: number;\n  scoreThreshold?: number;\n  nmsRadius?: number;\n}\n\n// these added back to not break the existing api.\nexport interface LegacyMultiPersonInferenceConfig extends\n    MultiPersonInferenceConfig {\n  decodingMethod: 'multi-person';\n}\n\nexport interface LegacySinglePersonInferenceConfig extends\n    SinglePersonInterfaceConfig {\n  decodingMethod: 'single-person';\n}\n\nexport const SINGLE_PERSON_INFERENCE_CONFIG: SinglePersonInterfaceConfig = {\n  flipHorizontal: false\n};\n\nexport const MULTI_PERSON_INFERENCE_CONFIG: MultiPersonInferenceConfig = {\n  flipHorizontal: false,\n  maxDetections: 5,\n  scoreThreshold: 0.5,\n  nmsRadius: 20\n};\n\nfunction validateSinglePersonInferenceConfig(\n    config: SinglePersonInterfaceConfig) {}\n\nfunction validateMultiPersonInputConfig(config: MultiPersonInferenceConfig) {\n  const {maxDetections, scoreThreshold, nmsRadius} = config;\n\n  if (maxDetections <= 0) {\n    throw new Error(\n        `Invalid maxDetections ${maxDetections}. ` +\n        `Should be > 0`);\n  }\n\n  if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\n    throw new Error(\n        `Invalid scoreThreshold ${scoreThreshold}. ` +\n        `Should be in range [0.0, 1.0]`);\n  }\n\n  if (nmsRadius <= 0) {\n    throw new Error(`Invalid nmsRadius ${nmsRadius}.`);\n  }\n}\n\nexport class PoseNet {\n  readonly baseModel: BaseModel;\n  readonly inputResolution: [number, number];\n\n  constructor(net: BaseModel, inputResolution: [number, number]) {\n    assertValidOutputStride(net.outputStride);\n    assertValidResolution(inputResolution, net.outputStride);\n\n    this.baseModel = net;\n    this.inputResolution = inputResolution;\n  }\n\n  /**\n   * Infer through PoseNet, and estimates multiple poses using the outputs.\n   * This does standard ImageNet pre-processing before inferring through the\n   * model. The image should pixels should have values [0-255]. It detects\n   * multiple poses and finds their parts from part scores and displacement\n   * vectors using a fast greedy decoding algorithm.  It returns up to\n   * `config.maxDetections` object instance detections in decreasing root\n   * score order.\n   *\n   * @param input\n   * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\n   * image to feed through the network.\n   *\n   * @param config MultiPoseEstimationConfig object that contains parameters\n   * for the PoseNet inference using multiple pose estimation.\n   *\n   * @return An array of poses and their scores, each containing keypoints and\n   * the corresponding keypoint scores.  The positions of the keypoints are\n   * in the same scale as the original image\n   */\n  async estimateMultiplePoses(\n      input: PosenetInput,\n      config: MultiPersonInferenceConfig = MULTI_PERSON_INFERENCE_CONFIG):\n      Promise<Pose[]> {\n    const configWithDefaults: MultiPersonInferenceConfig = {\n      ...MULTI_PERSON_INFERENCE_CONFIG,\n      ...config\n    };\n\n    validateMultiPersonInputConfig(config);\n\n    const outputStride = this.baseModel.outputStride;\n    const inputResolution = this.inputResolution;\n\n    const [height, width] = getInputTensorDimensions(input);\n\n    const {resized, padding} = padAndResizeTo(input, inputResolution);\n\n    const {heatmapScores, offsets, displacementFwd, displacementBwd} =\n        this.baseModel.predict(resized);\n\n    const allTensorBuffers = await toTensorBuffers3D(\n        [heatmapScores, offsets, displacementFwd, displacementBwd]);\n\n    const scoresBuffer = allTensorBuffers[0];\n    const offsetsBuffer = allTensorBuffers[1];\n    const displacementsFwdBuffer = allTensorBuffers[2];\n    const displacementsBwdBuffer = allTensorBuffers[3];\n\n    const poses = await decodeMultiplePoses(\n        scoresBuffer, offsetsBuffer, displacementsFwdBuffer,\n        displacementsBwdBuffer, outputStride, configWithDefaults.maxDetections,\n        configWithDefaults.scoreThreshold, configWithDefaults.nmsRadius);\n\n    const resultPoses = scaleAndFlipPoses(\n        poses, [height, width], inputResolution, padding,\n        configWithDefaults.flipHorizontal);\n\n    heatmapScores.dispose();\n    offsets.dispose();\n    displacementFwd.dispose();\n    displacementBwd.dispose();\n    resized.dispose();\n\n    return resultPoses;\n  }\n\n  /**\n   * Infer through PoseNet, and estimates a single pose using the outputs.\n   * This does standard ImageNet pre-processing before inferring through the\n   * model. The image should pixels should have values [0-255]. It detects\n   * multiple poses and finds their parts from part scores and displacement\n   * vectors using a fast greedy decoding algorithm.  It returns a single pose\n   *\n   * @param input\n   * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\n   * image to feed through the network.\n   *\n   * @param config SinglePersonEstimationConfig object that contains\n   * parameters for the PoseNet inference using single pose estimation.\n   *\n   * @return An pose and its scores, containing keypoints and\n   * the corresponding keypoint scores.  The positions of the keypoints are\n   * in the same scale as the original image\n   */\n  async estimateSinglePose(\n      input: PosenetInput,\n      config: SinglePersonInterfaceConfig = SINGLE_PERSON_INFERENCE_CONFIG):\n      Promise<Pose> {\n    const configWithDefaults = {...SINGLE_PERSON_INFERENCE_CONFIG, ...config};\n\n    validateSinglePersonInferenceConfig(configWithDefaults);\n\n    const outputStride = this.baseModel.outputStride;\n    const inputResolution = this.inputResolution;\n\n    const [height, width] = getInputTensorDimensions(input);\n\n    const {resized, padding} = padAndResizeTo(input, inputResolution);\n\n    const {heatmapScores, offsets, displacementFwd, displacementBwd} =\n        this.baseModel.predict(resized);\n\n    const pose = await decodeSinglePose(heatmapScores, offsets, outputStride);\n    const poses = [pose];\n\n    const resultPoses = scaleAndFlipPoses(\n        poses, [height, width], inputResolution, padding,\n        configWithDefaults.flipHorizontal);\n\n    heatmapScores.dispose();\n    offsets.dispose();\n    displacementFwd.dispose();\n    displacementBwd.dispose();\n    resized.dispose();\n\n    return resultPoses[0];\n  }\n\n  /** Deprecated: Use either estimateSinglePose or estimateMultiplePoses */\n  async estimatePoses(\n      input: PosenetInput,\n      config: LegacySinglePersonInferenceConfig|\n      LegacyMultiPersonInferenceConfig): Promise<Pose[]> {\n    if (config.decodingMethod === 'single-person') {\n      const pose = await this.estimateSinglePose(input, config);\n      return [pose];\n    } else {\n      return this.estimateMultiplePoses(input, config);\n    }\n  }\n\n  public dispose() {\n    this.baseModel.dispose();\n  }\n}\n\nasync function loadMobileNet(config: ModelConfig): Promise<PoseNet> {\n  const outputStride = config.outputStride;\n  const quantBytes = config.quantBytes;\n  const multiplier = config.multiplier;\n  if (tf == null) {\n    throw new Error(\n        `Cannot find TensorFlow.js. If you are using a <script> tag, please ` +\n        `also include @tensorflow/tfjs on the page before using this\n        model.`);\n  }\n\n  const url = mobileNetCheckpoint(outputStride, multiplier, quantBytes);\n  const graphModel = await tfconv.loadGraphModel(config.modelUrl || url);\n  const mobilenet = new MobileNet(graphModel, outputStride);\n\n  const validInputResolution = getValidInputResolutionDimensions(\n      config.inputResolution, mobilenet.outputStride);\n\n  return new PoseNet(mobilenet, validInputResolution);\n}\n\nasync function loadResNet(config: ModelConfig): Promise<PoseNet> {\n  const outputStride = config.outputStride;\n  const quantBytes = config.quantBytes;\n  if (tf == null) {\n    throw new Error(\n        `Cannot find TensorFlow.js. If you are using a <script> tag, please ` +\n        `also include @tensorflow/tfjs on the page before using this\n        model.`);\n  }\n\n  const url = resNet50Checkpoint(outputStride, quantBytes);\n  const graphModel = await tfconv.loadGraphModel(config.modelUrl || url);\n  const resnet = new ResNet(graphModel, outputStride);\n  const validInputResolution = getValidInputResolutionDimensions(\n      config.inputResolution, resnet.outputStride);\n  return new PoseNet(resnet, validInputResolution);\n}\n\n/**\n * Loads the PoseNet model instance from a checkpoint, with the ResNet\n * or MobileNet architecture. The model to be loaded is configurable using the\n * config dictionary ModelConfig. Please find more details in the\n * documentation of the ModelConfig.\n *\n * @param config ModelConfig dictionary that contains parameters for\n * the PoseNet loading process. Please find more details of each parameters\n * in the documentation of the ModelConfig interface. The predefined\n * `MOBILENET_V1_CONFIG` and `RESNET_CONFIG` can also be used as references\n * for defining your customized config.\n */\nexport async function load(config: ModelConfig = MOBILENET_V1_CONFIG):\n    Promise<PoseNet> {\n  config = validateModelConfig(config);\n  if (config.architecture === 'ResNet50') {\n    return loadResNet(config);\n  } else if (config.architecture === 'MobileNetV1') {\n    return loadMobileNet(config);\n  } else {\n    return null;\n  }\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.2.2';\nexport {version};\n"],"names":["model","outputStride","this","inputShape","inputs","shape","tf.util","assert","BaseModel","input","tf.tidy","asFloat","_this","preprocessInput","tf.cast","asBatch","tf.expandDims","results3d","predict","map","y","tf.squeeze","namedResults","nameOutputResults","heatmapScores","tf.sigmoid","heatmap","offsets","displacementFwd","displacementBwd","dispose","tslib_1.__extends","MobileNet","tf.sub","tf.div","results","half","k","Math","floor","maxSize","getElementValue","priorityQueue","Array","numberOfElements","MaxHeap","x","swim","max","exchange","sink","slice","less","j","i","getValueAt","t","scoreIsMaximumInLocalWindow","keypointId","score","heatmapY","heatmapX","localMaximumRadius","scores","_a","height","width","localMaximum","yStart","yEnd","min","yCurrent","xStart","xEnd","xCurrent","get","partNames","NUM_KEYPOINTS","length","partIds","reduce","result","jointName","poseChain","connectedPartIndices","jointNameA","jointNameB","getOffsetPoint","keypoint","getImageCoords","part","clamp","a","addVectors","b","parentChildrenTuples","parentJoinName","childJoinName","parentToChildEdges","childToParentEdges","getStridedIndexNearPoint","point","round","traverseToTargetKeypoint","edgeId","sourceKeypoint","targetKeypointId","scoresBuffer","displacements","offsetRefineStep","displacement","numEdges","getDisplacement","position","targetKeypoint","targetKeypointIndices","offsetPoint","targetKeyPointIndices","decodePose","root","displacementsFwd","displacementsBwd","numParts","instanceKeypoints","rootPart","rootScore","rootPoint","id","edge","sourceKeypointId","withinNmsRadiusOfCorrespondingPoint","poses","squaredNmsRadius","some","y1","x1","y2","x2","dy","dx","correspondingKeypoint","getInstanceScore","existingPoses","kLocalMaximumRadius","decodeMultiplePoses","offsetsBuffer","displacementsFwdBuffer","displacementsBwdBuffer","maxPoseDetections","scoreThreshold","nmsRadius","queue","numKeypoints","enqueue","buildPartWithScoreQueue","empty","dequeue","keypoints","push","argmax2d","depth","reshaped","tf.reshape","coords","tf.argMax","yCoords","tf.scalar","xCoords","floored","tf.mul","tf.concat","getOffsetPoints","heatMapCoordsBuffer","offsetVectors","valueOf","tf.tensor2d","getOffsetVectors","tf\r\n            .add","tf\r\n            .cast","tf\r\n            .mul","toTensor","decodeSinglePose","totalScore","heatmapValues","Promise","all","buffer","allTensorBuffers","heatmapValuesBuffer","offsetPoints","offsetPointsBuffer","keypointConfidence","from","heatMapCoords","Float32Array","getPointsConfidence","MOBILENET_BASE_URL","RESNET50_BASE_URL","imageNetMean","ResNet","tf.add","NEGATIVE_INFINITY","POSITIVE_INFINITY","getBoundingBox","_b","maxX","maxY","minX","minY","_c","scalePose","pose","scaleY","scaleX","offsetY","offsetX","toValidInputResolution","inputResolution","isValidInputResolution","validateInputResolution","getValidInputResolutionDimensions","VALID_OUTPUT_STRIDES","resolution","getInputTensorDimensions","tf.Tensor","padAndResizeTo","targetH","targetW","targetAspect","padT","padB","padL","padR","resized","imageTensor","tf.browser","fromPixels","toInputTensor","tf.pad3d","tf.image","resizeBilinear","padding","top","left","right","bottom","scaleAndFlipPoses","flipHorizontal","inputResolutionHeight","inputResolutionWidth","scaledPoses","scalePoses","imageWidth","flipPoseHorizontal","flipPosesHorizontal","MOBILENET_V1_CONFIG","architecture","multiplier","VALID_ARCHITECTURE","VALID_STRIDE","MobileNetV1","ResNet50","VALID_MULTIPLIER","VALID_QUANT_BYTES","SINGLE_PERSON_INFERENCE_CONFIG","MULTI_PERSON_INFERENCE_CONFIG","maxDetections","net","indexOf","assertValidResolution","baseModel","PoseNet","config","configWithDefaults","Error","validateMultiPersonInputConfig","tensors","tensor","toTensorBuffers3D","_d","resultPoses","decodingMethod","estimateSinglePose","estimateMultiplePoses","loadMobileNet","quantBytes","tf","url","stride","toStr","1","0.75","0.5","graphJson","mobileNetCheckpoint","tfconv.loadGraphModel","modelUrl","graphModel","mobilenet","validInputResolution","loadResNet","resNet50Checkpoint","resnet","validateModelConfig","minConfidence","leftJoint","rightJoint","eitherPointDoesntMeetConfidence"],"mappings":"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"}